#+TITLE: Halpha-emitters
* Find  SPLUS Halpha Emitters
:PROPERTIES:
:ID:       
:END:

** Motivation
I want to know the population of H\alpha emitter in SPLUS DR3 and described what kind of objects they are.

*** Previously papers related

+ Drew paper.

#+BEGIN_SRC bibtex

@article{Drew:2005,
    author = {Drew, Janet E. and Greimel, R. and Irwin, M. J. and Aungwerojwit, A. and Barlow, M. J. and Corradi, R. L. M. and Drake, J. J. and Gänsicke, B. T. and Groot, P. and Hales, A. and Hopewell, E. C. and Irwin, J. and Knigge, C. and Leisy, P. and Lennon, D. J. and Mampaso, A. and Masheder, M. R. W. and Matsuura, M. and Morales-Rueda, L. and Morris, R. A. H. and Parker, Q. A. and Phillipps, S. and Rodriguez-Gil, P. and Roelofs, G. and Skillen, I. and Sokoloski, J. L. and Steeghs, D. and Unruh, Y. C. and Viironen, K. and Vink, J. S. and Walton, N. A. and Witham, A. and Wright, N. and Zijlstra, A. A. and Zurita, A.},
    title = "{The INT Photometric Hα Survey of the Northern Galactic Plane (IPHAS)}",
    journal = {Monthly Notices of the Royal Astronomical Society},
    volume = {362},
    number = {3},
    pages = {753-776},
    year = {2005},
    month = {09},
    abstract = "{The Isaac Newton Telescope (INT) Photometric Hα Survey of the Northern Galactic Plane 
                (IPHAS) is a 1800-deg2 CCD survey of the northern Milky Way spanning the latitude range -5^$\degree$ \\&lt; b \\&lt; + 5° 
                and reaching down to r′≃ 20 (10s). Representative observations and an assessment of point-source data from IPHAS, 
                now underway, are presented. The data obtained are Wide Field Camera images in the Hα narrow-band, and Sloan r′ 
                and i′ broad-band filters. We simulate IPHAS (r′- H$\alpha$, r′- i′) point-source colours using a spectrophotometric 
                library of stellar spectra and available filter transmission profiles: this defines the expected colour properties of (i) 
                solar metallicity stars, without Hα emission, and (ii) emission-line stars. Comparisons with observations of fields 
                in Aquila show that the simulations of normal star colours reproduce the observations well for all spectral types 
                earlier than M. A further comparison between colours synthesized from long-slit flux-calibrated spectra and IPHAS 
                photometry for six objects in a Taurus field confirms the reliability of the pipeline calibration. Spectroscopic 
                follow-up of a field in Cepheus shows that sources lying above the main stellar locus in the (r′− Hα, r′−i′) plane 
                are confirmed to be emission-line objects with very few failures. In this same field, examples of Hα deficit objects 
                (a white dwarf and a carbon star) are shown to be readily distinguished by their IPHAS colours. The role IPHAS can play 
                in studies of spatially resolved northern Galactic nebulae is discussed briefly and illustrated by a continuum-subtracted 
                mosaic image of Shajn 147 (a supernova remnant, 3° in diameter). The final catalogue of IPHAS point sources will 
                contain photometry on about 80 million objects. Used on its own, or in combination with near-infrared photometric 
                catalogues, IPHAS is a major resource for the study of stellar populations making up the disc of the Milky Way. 
                The eventual yield of new northern emission-line objects from IPHAS is likely to be an order of magnitude increase 
                on the number already known.}",
    issn = {0035-8711},
    doi = {10.1111/j.1365-2966.2005.09330.x},
    url = {https://doi.org/10.1111/j.1365-2966.2005.09330.x},
    eprint = {https://academic.oup.com/mnras/article-pdf/362/3/753/2986007/362-3-753.pdf},}

#+END_SRC

+ [[https://ui.adsabs.harvard.edu/abs/2006MNRAS.369..581W/abstract][Witham et el. (2006)]] report on the properties of 71 known cataclysmic variables (CVs) in photometric 
  H\alpha emission-line surveys.  

+ [[https://ui.adsabs.harvard.edu/abs/2008MNRAS.384.1277W/abstract][Witham et el. (2008)]] present a catalogue of point-sources H\alpha emission objects identified in IPHAS.

+ [[https://ui.adsabs.harvard.edu/abs/2013MNRAS.428.2207S/abstract][Scaringi et al. (2013]]) present the first results of an ongoing spectroscopic follow-up programme
  of blue-H\alpha-excess sources within the Kepler field of view in order to identify new cataclysmic variables.

+ [[https://ui.adsabs.harvard.edu/abs/2017MNRAS.466..163W/abstract][Wevers et al. (2017)]] paper present a catalog of H$\alpha$ emitters candidates.  
  
+ [[https://ui.adsabs.harvard.edu/abs/2020A%26A...643A.122S/abstract][Škoda et al. (2020)]] using deep learning found new emission line objects.
 
* Looking for Halpha emitters using color criteria and database
By inspecting the position of Splus synthetic photometry known emission line objects
in the (r-Ha)vs(r-i) color color diagram. I have divided the location of them in two zone.
Zone 2 is the region with high probability of being real emission line objects (ELO)
there are not contamination by main-sequence, and giant stars and WD (see, file:Fig-SPLUS-viironen.pdf).
Zone are populated by main-sequence, DWs and ELOs. These last have probably very small H\alpha excess.

*** Possible methods to find for ELO
For the zone 2, I think is just necessary apply a color criterion based in the position of the
known ELOs.
The zone 1: Here is most complicated due to the presence of MS and WD stars. 
Witham carry out an initial straight line least-squares fit toall objects in each magnitude bin.
I propose to use unsupervised machine learning to do that.

** Change
I decided to apply the criteria all data. I selected objects with very good photometry: errors minors
and equal than 0.2 in all bands, flats in J0660, r and i  minor and equal than 2.0. 
At the moment I apply FWHM <= 2.0.

**** DBSCAN

The DBSCAN approach works on a very similar principle as grid-based methods. However,
unlike grid-based methods, the density characteristics of data points are used to merge them
into clusters. Therefore, the individual data points in dense regions are used as building
blocks after classifying them on the basis of their density.
The density of a data point is defined by the number of points that lie within a radius
Eps of that point (including the point itself). The densities of these spherical regions are
used to classify the data points into core, border, or noise points. These notions are defined
as follows:

1. Core point: A data point is defined as a core point, if it contains 4 at least τ data points.

2. Border point: A data point is defined as a border point, if it contains less than τ points,
   but it also contains at least one core point within a radius Eps.

***** DBSCAN with Python Scikit-Learn

Some examples using DBSCAN algorithms:
 + [[file:Notebook/DBSCAN testing.ipynb][DBSCAN]]
 + [[file:Notebook/K-distance graph to find the value of epsilon and other clustering algorithms .ipynb]] 


***** DBSCAN Parameter Estimation 

Source: [[https://medium.com/@tarammullin/dbscan-parameter-estimation-ff8330e3a3bd]]
Focus on estimating DBSCAN’s two parameters:

1. Minimum samples (“MinPts”): the fewest number of points required to form a cluster
2. \epsilon (epsilon or “eps”): the maximum distance two points can be from one another while still belonging to the same cluster

+ Minimum Samples (“MinPts”)
  There is no automatic way to determine the MinPts value for DBSCAN. Ultimately, the MinPts value should be set using
  domain knowledge and familiarity with the data set. From some research I’ve done, 
  here are a few rules of thumb for selecting the MinPts value:

    + The larger the data set, the larger the value of MinPts should be
    + If the data set is noisier, choose a larger value of MinPts
    + Generally, MinPts should be greater than or equal to the dimensionality of the data set
    + For 2-dimensional data, use DBSCAN’s default value of MinPts = 4 (Ester et al., 1996).
    + If your data has more than 2 dimensions, choose MinPts = 2*dim, where dim = the dimensions of your data set (Sander et al., 1998).

+ Epsilon (\epsilon)
  After you select your MinPts value, you can move on to determining ε. One technique to automatically determine the optimal \epsilon value 
  is described here. This technique calculates the average distance between each point and its k-nearest neighbors, 
  where k = the MinPts value you selected. 
  The average k-distances are then plotted in ascending order on a k-distance graph. 
  You’ll find the optimal value for \epsilon at the point of maximum curvature (i.e. where the graph has the greatest slope).


**** OPTICS

Put information here...

Some sources:
 + https://www.machinecurve.com/index.php/2020/12/15/performing-optics-clustering-with-python-and-scikit-learn/

... For this reason, OPTICS is preferable over DBSCAN when your clusters have varying density. In other cases,
the choice for algorithm does not really matter.

***** OPTICS with Python Scikit-Learn

Some examples using OPTICS algorithms:
 + [[OPTICS Demo.ipynb]]
 + 
 
**** Some conclusions

I tested with JPLUS data, consult:
   [[file:../../JPLUS/emission_objects.org]]

I tried unsupervised machine learning to find the locus of Main sequence and Giant stars: 
+ I first try DBSCAN but no worked very well due to it falls with varying density. Many mini cluster were found and this dint make sense.
+ I tried OPTICS algorithm to find the MS and Giant locus. It works better than DBSCAN when we have data with varying density and don't need 
  to introduce the \epsilon parameter. The problem is take long take executing.  
+ Finally I try we HDBSCAN works very well. I made several test to find the best parameters that allow to better clustering.  

**** HDBSCAN

***** Test different parameters

#+BEGIN_SRC test hdbscan
+ min_samples=20, min_cluster_size=60 -> Estimated number of clusters: 4
                                         Estimated number of cluster points 0: 85
                                         Estimated number of cluster points 1: 129
                                         Estimated number of cluster points 2: 1167500
                                         Estimated number of noise points: 37670

+ min_samples=20, min_cluster_size=70 -> Estimated number of clusters: 4
                                         Estimated number of cluster points 0: 85
                                         Estimated number of cluster points 1: 129
                                         Estimated number of cluster points 2: 1167500
                                         Estimated number of noise points: 37670

+ min_samples=20, min_cluster_size=80 -> Estimated number of clusters: 3
                                         Estimated number of cluster points 0: 85
                                         Estimated number of cluster points 1: 129
                                         Estimated number of cluster points 2: 1190902
                                         Estimated number of noise points: 14344

+ min_samples=20, min_cluster_size=90 -> Estimated number of clusters: 2
                                         Estimated number of cluster points 0: 129
                                         Estimated number of cluster points 1: 1190902
                                         Estimated number of cluster points 2: 0
                                         Estimated number of noise points: 14429

+ min_samples=20, min_cluster_size=100 -> Same than min_samples=20, min_cluster_size=90
#+END_SRC

#+BEGIN_SRC test :hdbscan
+ min_samples=30, min_cluster_size=90 -> Cluster 0 172
                                         Cluster 1 1191735
                                         Cluster 2 0
                                         Noise 13553

+ min_samples=30, min_cluster_size=70 -> Estimated number of clusters: 3
                                         Estimated number of cluster points 0: 172
                                         Estimated number of cluster points 1: 78
                                         Estimated number of cluster points 2: 1171175
                                         Estimated number of noise points: 34035

+ min_samples=30, min_cluster_size=80 -> Estimated number of clusters: 2
                                         Estimated number of cluster points 0: 172
                                         Estimated number of cluster points 1: 1191735
                                         Estimated number of cluster points 2: 0
                                         Estimated number of noise points: 13553

+ min_samples=30, min_cluster_size=100 -> Estimated number of clusters: 2
                                          Estimated number of cluster points 0: 172
                                          Estimated number of cluster points 1: 1191735
                                          Estimated number of cluster points 2: 0
                                          Estimated number of noise points: 13553

+ min_samples=30, min_cluster_size=60 -> Estimated number of clusters: 3
                                         Estimated number of cluster points 0: 172
                                         Estimated number of cluster points 1: 78
                                         Estimated number of cluster points 2: 1171175
                                         Estimated number of noise points: 34035
#+END_SRC

#+BEGIN_SRC test :hdbscan
+ min_samples=40, min_cluster_size=60 -> Estimated number of clusters: 2
                                         Estimated number of cluster points 0: 122
                                         Estimated number of cluster points 1: 1191359
                                         Estimated number of cluster points 2: 0
                                         Estimated number of noise points: 13979

+ min_samples=40, min_cluster_size=70 -> Estimated number of clusters: 2
                                         Estimated number of cluster points 0: 122
                                         Estimated number of cluster points 1: 1191359
                                         Estimated number of cluster points 2: 0
                                         Estimated number of noise points: 13979

+ min_samples=40, min_cluster_size=80 -> Estimated number of clusters: 2
                                         Estimated number of cluster points 0: 122
                                         Estimated number of cluster points 1: 1191359
                                         Estimated number of cluster points 2: 0
                                         Estimated number of noise points: 13979  

+ min_samples=40, min_cluster_size=90 -> Same
#+END_SRC
-------------------------------------------------------------------------------------

#+BEGIN_SRC test hdbscan
+ min_samples=60, min_cluster_size=100 -> Estimated number of clusters: 4
                                          Estimated number of cluster points 0: 204
                                          Estimated number of cluster points 1: 112
                                          Estimated number of cluster points 2: 263
                                          Estimated number of noise points: 1153528
#+END_SRC
*** How download the data from the SPLUS database? 

IDR3 has 59,738,355 objects.

In agreement with the synthetic photometry, I downloaded the objects from the database with subjective equation: =r - H\alpha > 0.15*(r - i) - 0.4=.

#+BEGIN_SRC sql :query to select objects
SELECT detection.ID
FROM idr3.detection_image as detection JOIN idr3.u_band as u ON detection.ID=u.ID 
JOIN idr3.f378_band as f378 ON detection.ID=f378.ID JOIN idr3.f395_band as f395 ON detection.ID=f395.ID
JOIN idr3.f410_band as f410 ON detection.ID=f410.ID JOIN idr3.f430_band as f430 ON detection.ID=f430.ID JOIN idr3.g_band as g ON detection.ID=g.ID 
JOIN idr3.f515_band as f515 ON detection.ID=f515.ID JOIN idr3.r_band as r ON detection.ID=r.ID JOIN idr3.f660_band as f660 ON detection.ID=f660.ID 
JOIN idr3.i_band as i ON detection.ID=i.ID JOIN idr3.f861_band as f861 ON detection.ID=f861.ID JOIN idr3.z_band as z ON detection.ID=z.ID 
WHERE R_PStotal <= 21 AND F660_PStotal <= 21 AND I_PStotal <= 21 AND e_U_PStotal <= 0.2 AND e_F378_PStotal <= 0.2 AND e_F395_PStotal <= 0.2 AND e_F410_PStotal <= 0.2 
AND e_F430_PStotal <= 0.2 AND e_G_PStotal <= 0.2 AND e_F515_PStotal <= 0.2 AND e_R_PStotal <= 0.2 AND e_F660_PStotal <= 0.2 AND e_I_PStotal <= 0.2
AND e_F861_PStotal <= 0.2 AND e_Z_PStotal <= 0.2 
AND FWHM < 7.0 AND (R_PStotal - F660_PStotal) >= 0.15*(R_PStotal - I_PStotal) - 0.4
#+END_SRC


The above query take long time. Take 21min.
The next step is to make matching this Votable using website and ADQL language including the columns desire.

#+BEGIN_SRC sql :query to match with columns desire
SELECT detection.Field, detection.ID, detection.RA, detection.DEC, detection.FWHM, detection.ISOarea, detection.KRON_RADIUS, 
detection.nDet_magPStotal, detection.PhotoFlagDet, u.U_PStotal, f378.F378_PStotal, f395.F395_PStotal,
f410.F410_PStotal, f430.F430_PStotal, g.G_PStotal, f515.F515_PStotal, r.R_PStotal, f660.F660_PStotal, i.I_PStotal, 
f861.F861_PStotal, z.Z_PStotal, u.e_U_PStotal, f378.e_F378_PStotal, f395.e_F395_PStotal, f410.e_F410_PStotal, f430.e_F430_PStotal, 
g.e_G_PStotal, f515.e_F515_PStotal, r.e_R_PStotal, f660.e_F660_PStotal, i.e_I_PStotal, f861.e_F861_PStotal, z.e_Z_PStotal 
FROM TAP_UPLOAD.upload as tap JOIN idr3.detection_image as detection ON tap.ID= detection.ID  JOIN idr3.u_band as u ON tap.ID=u.ID 
JOIN idr3.f378_band as f378 ON tap.ID=f378.ID JOIN idr3.f395_band as f395 ON tap.ID=f395.ID
JOIN idr3.f410_band as f410 ON tap.ID=f410.ID JOIN idr3.f430_band as f430 ON tap.ID=f430.ID JOIN idr3.g_band as g ON tap.ID=g.ID 
JOIN idr3.f515_band as f515 ON tap.ID=f515.ID JOIN idr3.r_band as r ON tap.ID=r.ID JOIN idr3.f660_band as f660 ON tap.ID=f660.ID 
JOIN idr3.i_band as i ON tap.ID=i.ID JOIN idr3.f861_band as f861 ON tap.ID=f861.ID JOIN idr3.z_band as z ON tap.ID=z.ID 
#+END_SRC

I got the error:
: Error message: Error while reading the VOTable "upload": Data read overflow: the limit of 2000 rows has been reached!

Try the initial query include the columns desire.

#+BEGIN_SRC sql 
SELECT detection.Field, detection.ID, detection.RA, detection.DEC, detection.FWHM, detection.ISOarea, detection.KRON_RADIUS, 
detection.nDet_magPStotal, detection.PhotoFlagDet, u.U_PStotal, f378.F378_PStotal, f395.F395_PStotal,
f410.F410_PStotal, f430.F430_PStotal, g.G_PStotal, f515.F515_PStotal, r.R_PStotal, f660.F660_PStotal, i.I_PStotal, 
f861.F861_PStotal, z.Z_PStotal, u.e_U_PStotal, f378.e_F378_PStotal, f395.e_F395_PStotal, f410.e_F410_PStotal, f430.e_F430_PStotal, 
g.e_G_PStotal, f515.e_F515_PStotal, r.e_R_PStotal, f660.e_F660_PStotal, i.e_I_PStotal, f861.e_F861_PStotal, z.e_Z_PStotal
FROM idr3.detection_image as detection JOIN idr3.u_band as u ON detection.ID=u.ID 
JOIN idr3.f378_band as f378 ON detection.ID=f378.ID JOIN idr3.f395_band as f395 ON detection.ID=f395.ID
JOIN idr3.f410_band as f410 ON detection.ID=f410.ID JOIN idr3.f430_band as f430 ON detection.ID=f430.ID JOIN idr3.g_band as g ON detection.ID=g.ID 
JOIN idr3.f515_band as f515 ON detection.ID=f515.ID JOIN idr3.r_band as r ON detection.ID=r.ID JOIN idr3.f660_band as f660 ON detection.ID=f660.ID 
JOIN idr3.i_band as i ON detection.ID=i.ID JOIN idr3.f861_band as f861 ON detection.ID=f861.ID JOIN idr3.z_band as z ON detection.ID=z.ID 
WHERE R_PStotal <= 21 AND F660_PStotal <= 21 AND I_PStotal <= 21 AND e_U_PStotal <= 0.2 AND e_F378_PStotal <= 0.2 AND e_F395_PStotal <= 0.2 AND e_F410_PStotal <= 0.2 
AND e_F430_PStotal <= 0.2 AND e_G_PStotal <= 0.2 AND e_F515_PStotal <= 0.2 AND e_R_PStotal <= 0.2 AND e_F660_PStotal <= 0.2 AND e_I_PStotal <= 0.2
AND e_F861_PStotal <= 0.2 AND e_Z_PStotal <= 0.2 
AND FWHM < 7.0 AND (R_PStotal - F660_PStotal) >= 0.15*(R_PStotal - I_PStotal) - 0.4
#+END_SRC

Take 11mins.

I ran the query:

SELECT count(*) FROM idr3.detection_image as detection JOIN idr3.r_band as r ON detection.ID=r.ID JOIN idr3.f660_band as 
f660 ON detection.ID=f660.ID JOIN idr3.i_band as i ON detection.ID=i.ID 
WHERE R_PStotal <= 21 AND e_R_PStotal <= 0.2 
AND e_F660_PStotal <= 0.2 AND e_I_PStotal <= 0.2 AND FWHM < 7.0 AND R_PStotal < 16.0

Take around 45min.
Results =1251923=.

I found that using the Gustavos database is restricted to get table with 20000 rows.

**** Download stamps
Script to download stamp images FITS from database
: python ../../programs/get-splus-fits.py 351.0847562454346 -0.10695578184817373 --radi 300 --band F515 --name GALEX24170

**** Download colored and cut images from database

I write a script to download the colored images and make them for publication:

#+begin_src python
 '''
 Scrit to download colored images from database
 '''
 # Import the necessary packages 
 import splusdata 
 import pandas as pd
 import matplotlib.pyplot as plt
 import aplpy
 from astropy.io import fits
 from astropy.wcs import WCS
 import os
 import argparse
 import sys

 parser = argparse.ArgumentParser(
     description="""Get colored image and cut image in the r-band""")

 parser.add_argument("ra", type=float,
                     default="316.473196",
                     help="RA of the object")

 parser.add_argument("dec", type=float,
                    default="-37.144562",
                    help="Dec of the object")

 parser.add_argument("--radi", type=float, default=None,
                    help="""Size of the images in pixel""")

 parser.add_argument("--name", type=str, default=None,
                    help="""Name of the object""")

 cmd_args = parser.parse_args()
 ra = cmd_args.ra
 dec = cmd_args.dec

 # Radius
 rad = int(cmd_args.radi)

 # Nome of the object if has
 Name = cmd_args.name

 # Connect
 conn = splusdata.connect(' ', ' ')

 # Getting the colored imge
 img = conn.twelve_band_img(ra, dec, radius=rad, noise=0.15, saturation=0.15)

 # Getting the Fits image in the r-band
 hdu = conn.get_cut(ra, dec, rad, 'R')

 # Save the image, note that the output image in compress
 hdu.writeto('{}_{}-{}_{}_r.fz'.format(Name, ra, dec, rad), overwrite=True) # write to fits

 ############################################################
 # Definition to decompress the images ######################
 ############################################################
 def fz2fits(image):
     """
     It converts SPLUS images
     from .fz to .fits
     """
     datos = fits.open(image)[1].data
     heada = fits.open(image)[1].header
     imageout = image[:-2] + 'fits'
     print ('Creating file: ')
     print (imageout)
     fits.writeto(imageout, datos, heada, overwrite=True)
 ############################################################
 # Decompress
 hdufits = fz2fits('{}_{}-{}_{}_r.fz'.format(Name, ra, dec, rad))

 # Read the FITS file
 hdul = fits.open('{}_{}-{}_{}_r.fits'.format(Name, ra, dec, rad))[0]
 wcs = WCS(hdul.header)

 print(wcs)                 

 f = plt.figure(figsize=(18,9))

 ax1 = aplpy.FITSFigure(hdul, figure=f, subplot=(1, 1, 1))#, north=True)
 plt.imshow(img, origin='lower', cmap='cividis', aspect='equal')
                 
 ax1.add_scalebar(20.0/3600)
 ax1.scalebar.set_label('20 arcsec')
 ax1.scalebar.set(color='yellow', linewidth=4, alpha=0.9)
 ax1.scalebar.set_font(size=23, weight='bold',
                      stretch='normal', family='sans-serif',
                      style='normal', variant='normal')

 ax1.axis_labels.set_font(size=22, weight='medium', stretch='normal', family='sans-serif', style='normal', variant='normal')
 #img.axis_labels.hide()
 #img.axis_labels.hide_y()

 ax1.tick_labels.set_font(size=22, weight='medium', stretch='normal', family='sans-serif', style='normal', variant='normal')
 #ax1.list_layers()
 #ax1.show_markers(ra, dec, layer='marker', edgecolor='green', facecolor='none', marker='o', s=10, alpha=0.9, linewidths=60)#, layer='marker_set_1', edgecolor='black', facecolor='none', s=30, alpha=0.5, linewidths=20)


 # ax1.axis_labels.hide_y()
 # ax1.tick_labels.hide_y()

 #ax2.colorbar.set_box([0.95, 0.1, 0.015, 0.8])
 ax1.set_theme('publication')
 #f.tight_layout()
 #f.savefig("-".join([image_name, "images.pdf"]))

 plt.savefig('{}_{}-{}_{}_r.fits'.format(Name, ra, dec, rad).replace(".fits", ".pdf"))
#+END_SRC

: python ../../programs/getColored-imgesSplus.py 338.66637521384126 0.6909664418071105 --radi 100 --name FASTT1560

***** Or make 3-band colored images
: python ../../programs/rgb_image-v2.py GALEX24170_351-0_300_F515 GALEX24170_351-0_300_F660 GALEX24170_351-0_300_F515 --debug



*** Alternative solution: sqlite

A possible solution is to create a database in my own machine.
Disadvantage: The file are very large. For instance HYDRA catalog has ~15G in size.

Considering https://github.com/astropy/astropy/pull/4760 for sigma clipping.

*** Change the methodology

Find the locus of MS stars by line fit to all data and apply the methodology from Witham et al. (2006)
to select the H\alpha emitters. After apply HDBSCAN to find the locus of MS stars to compare 
with the other one.   

+ I created my own data base with DR3. After I wrote a script on python to download the data
  with these criteria: Flags_allFilter <= 2, error_allFilter <= 0.2, and magnitude interval on r-band.
: python apply_query.py

*** Final methods: Linear fit
Method based on Witham et al. (2008) and Wevers et al. (2017).
: python ../MC/programs/Selecting_Halpha_objects.py LMC_catalog_3fer_18r20 --Ranger "18 $\geq$ r < 20"

**** Second phase: Cross-match 
+ Lamost -> 
  I mede macth with dr6.


+ Match with sloan. Limited to 1000 rows.
  Program to write the table in SDSS format to download spectra and to split the table:
: python ../programs/coordinate_forSloantMacth.py Halpha-DR3_noFlag_merge

+ Match with [[http://skyserver.sdss.org/dr16/en/tools/search/SQS.aspx][SDSS]]

**** S-spectra
- I used the r-band  and 6250.289 Angstrom on Lamost. 

- Program:
: python ../../programs/splus_sdss_spectra.py spec-9152-58041-0463 Halpha-DR3_noFlag_3ferr_merge --ymin -0.05 --ymax 0.62
: for f in *.fits; do python ../../programs/splus_sdss_spectra.py ${f%.fits} Halpha-DR3_noFlag_3ferr_merge --ymax 3; done

- To make the S-pectra for the paper.
: python ../../programs/spectra-splus-sdss-simbad.py spec-0410-51877-0492 simbad --ymin -0.05 --ymax 4 --yann1 2.3 --yann2 1.9 --yann3 1.5

**** Several plots

Plots with the results

: python ../programs/results.py 

+ What about try a plot r-mag vs b(Gal)?

+ the color color diagram (g-r) vs (z-g) synthetic one:
  I calculated the redered vector. I used the programs and input files in the
  HD external-old:

: python new-programs/reddening-colors.py

#+BEGIN_SRC results
EV = 0.0: x: 1.132870000996891 y: 0.018073588174977603
EV = 0.7: x: -0.4583375579229554 y: 0.8779161171076658
#+END_SRC

*** Clean the final tables using ML

** Linear dicriminad analysis

Using linear discriminant analisys to clean the final sample of H{$\alpha$} emitters:

#+BEGIN_SRC results

 Shape of array: (419, 12)
 Accuracy score for Testing Dataset =  0.8333333333333334
 Precision score for Testing Dataset =  0.8205128205128205
 Confusion matrix =  (38  7)
                    ( 7 32)
 Data to classify: (13644, 12)
 13644

#+END_SRC


#+BEGIN_SRC results

Shape of array: (419, 7)
Accuracy score for Testing Dataset =  0.7976190476190477
Precision score for Testing Dataset =  0.7948717948717948
Confusion matrix =  (36  9)
                    (8 31)
Data to classify: (13644, 7)
13644
#+END_SRC

** Things that remain to be done 
+ Finished the red and blue classification: 
  - Compare the synthetic color with the observed one.
  - Compare with statistical techniques (Hierarchical models).
:DONE:

+ Used the QSOs, stars and galaxy classification.
  - Tutorial of Liliene about how implement the star, galaxy and QSO classification:

#+BEGIN_SRC  e-mail
    1. Baixar última versão do splusdata (3.65)
       pip install --upgrade splusdata

    2. No Python:
       from splusdata.features.g_star import ClassifyObj #pode acabar mudando em breve essa parte do "splusdata.features.g_star"
       clf = ClassifyObj(data, model="RF16", return_prob = True, match_irsa=False)
       clf.results #acessa os resultados. Os índices das linhas têm direta correspondência com os índices do dataframe de input. 

       ps: vai mudar todo o fluxo em breve na proxima versão do splusdata
       ----------------------

       data: pandas dataframe que precisa obrigatoriamente ter as seguintes informações

       ['FWHM_n', 'A', 'B', 'KRON_RADIUS', 'u_iso', 'J0378_iso',
        'J0395_iso','J0410_iso','J0430_iso', 'g_iso','J0515_iso',
        'r_iso','J0660_iso', 'i_iso','J0861_iso', 'z_iso']

       as magnitudes precisam estar previamente corrigidas pela extinção

       model: ["RF16", "RF18" ou "both"] determina com qual modelo vai ser gerada as classificações.
       "RF16": usa o modelo que leva em consideração apenas os dados do S-PLUS
       "RF18": usa o modelo que leva em consideração os dados do S-PLUS e W1 e W2 do WISE (em magnitude vega) 
       "both": se usar essa opção vai retornar a classificação RF18 para objetos que tem informação no WISE (model_flag == 0),
caso contrário vai retornar a classificação por RF16 (model_flag==1). 
       Nota: "RF18" pode retornar um dataframe MENOR que o dataframe de input pois nem todos os objetos terão informação no WISE.
Os indíces da linha são mantidos, então se fizer um pd.concat([data, clf.results], axis=1) irá fazer o join das tabelas de forma correta. 

       return_prob: [True ou False] se True, determina se irá retornar as probabilidades. Caso contrário, retornará
apenas a classe (0: QSO, 1: STAR, 2: GALAXY)

       match_irsa: [True ou False] se True, irá fazer query do ALLWISE catalogue e fará o crossmatch
com os dados de entrada para que seja possível rodar o modelo RF18. Se model == "RF16", match_irsa == False automaticamente.

       verbose: [True ou False] se True, retorna prints de cada etapa
#+END_SRC
 
  - Cross-match to download the table with the right columns.

       Query:

#+BEGIN_SRC sql : query for match
       SELECT detection.Field, detection.ID, detection.RA, detection.DEC, detection.FWHM, detection.FWHM_n, detection.A, 
       detection.B, detection.ISOarea, detection.KRON_RADIUS, 
       detection.nDet_PStotal, detection.PhotoFlagDet, u.u_PStotal, J0378.J0378_PStotal, J0395.J0395_PStotal,
       J0410.J0410_PStotal, J0430.J0430_PStotal, g.g_PStotal, J0515.J0515_PStotal, r.r_PStotal, J0660.J0660_PStotal, i.i_PStotal, 
       J0861.J0861_PStotal, z.z_PStotal, u.e_u_PStotal, J0378.e_J0378_PStotal, J0395.e_J0395_PStotal, J0410.e_J0410_PStotal, J0430.e_J0430_PStotal, 
       g.e_g_PStotal, J0515.e_J0515_PStotal, r.e_r_PStotal, J0660.e_J0660_PStotal, i.e_i_PStotal, J0861.e_J0861_PStotal, z.e_z_PStotal, 
       u.u_iso, J0378.J0378_iso, J0395.J0395_iso,
       J0410.J0410_iso, J0430.J0430_iso, g.g_iso, J0515.J0515_iso, r.r_iso, J0660.J0660_iso, i.i_iso, 
       J0861.J0861_iso, z.z_iso, u.e_u_iso, J0378.e_J0378_iso, J0395.e_J0395_iso, J0410.e_J0410_iso, J0430.e_J0430_iso, 
       g.e_g_iso, J0515.e_J0515_iso, r.e_r_iso, J0660.e_J0660_iso, i.e_i_iso, J0861.e_J0861_iso, z.e_z_iso 
       FROM TAP_UPLOAD.upload as tap JOIN idr3.detection_image as detection ON tap.ID= detection.ID JOIN idr3.u_band as u ON tap.ID=u.ID 
       JOIN idr3.j0378_band as J0378 ON tap.ID=J0378.ID JOIN idr3.J0395_band as J0395 ON tap.ID=J0395.ID
       JOIN idr3.J0410_band as J0410 ON tap.ID=J0410.ID JOIN idr3.J0430_band as J0430 ON tap.ID=J0430.ID JOIN idr3.g_band as g ON tap.ID=g.ID 
       JOIN idr3.J0515_band as J0515 ON tap.ID=J0515.ID JOIN idr3.r_band as r ON tap.ID=r.ID JOIN idr3.J0660_band as J0660 ON tap.ID=J0660.ID 
       JOIN idr3.i_band as i ON tap.ID=i.ID JOIN idr3.J0861_band as J0861 ON tap.ID=J0861.ID JOIN idr3.z_band as z ON tap.ID=z.ID 
#+END_SRC
      
       Before to apply the query I split the file (I am not sure if necessary) but the splus documentation says that the cross match is restringing to 2000 rows.
       : python ../../programs/join-csvtable.py

+ Cross-match SDSS, LAMOST, SIMBAD.

+ The separation between blue and red sources sees works well.
+ I checked visually all the objects of my list of Halpha emitters.
+ I made a latex table with all objects crossmatched with Simbad. This table include the 
  classification red and blue sources  using the hierarchical cluster analysis and the
  probability of belong each class using HDBSCAN. 

** Notes  
+ The object iDR3.SPLUS-n05n50.017121 (216.6133870755976, 5.065007143584472) is interesant.
+ PN NGC 3132 iDR3.HYDRA-0121.061126 (151.7447846287751, -40.4433163332109)
+ Spectra for the paper:
  - STRIPE82-0026-058736 -> H II galaxy
  - STRIPE82-0031.029096 -> H II galaxy
  - STRIPE82-0027.022810 -> H II galaxy
  - STRIPE82-0108.039253 -> CV
  - STRIPE82-0142.027354 -> CV 
  - STRIPE82-0152.056707 -> CV
  - STRIPE82-0165.038101 -> CV
  - STRIPE82-0103.089600 -> CV
  - STRIPE82-0159.019049 -> H II regions
  - STRIPE82-0028.045006 (18.244350529013424 0.9761179117928264) -> extra H II region
  - STRIPE82-0026.037373 (16.580131544341818 0.8064950808416276) -> QSO
  - SPLUS-n03s23.033092 (180.0906960738449 -2.72525835885637) -> QSO, very weak, would be good idea put QSO with very weak line.
  - STRIPE82-0032.003020 -> QSO
  - STRIPE82-0044.021486 -> QSO
  - STRIPE82-0003.028018 -> QSO
  - STRIPE82-0143.016137 -> QSO, select
  - SPLUS-n02s23.042426 (180.1095757612321 -1.1019334954271696) -> WR galaxy
  - SPLUS-n03s28.019988 (187.95005920551247 -2.970279786813015) -> WR galaxy
  		
+ Final spectra of known objects for the paper at the moment:
  - PN G006.0-41.9 -> SPLUS-s29s46.072842, (316.4731956938531 -37.14456181858315).
  - H II GALEX 2417063145906373262 -> STRIPE82-0159.019049 (351.0847562454346 -0.10695578184817373)
  - CV FASTT 1560 -> STRIPE82-0142.027354 (338.66637521384126 0.6909664418071105). None
  - HIIG LEDA 1185205 -> STRIPE82-0026.058736 (17.28310789223492 1.12097992550518)
  - QSO PHL   354 -> STRIPE82-0143.016137 (339.59688919210015 -0.952268013442764)
  - Galaxy Z  12-78 176.359607,0.00404 -> iDR3.SPLUS-n01s20.026220 (176.35960159169613, 0.0041113183584209), coloqué esta.
  - Galaxy ,LEDA 3107905,6.974365,-0.966824 -> iDR3.STRIPE82-0011.016278 (6.974318052697582, -0.9667199252402)
  - Galaxy 2dFGRS TGN176Z274, 178.308748,-3.408946 -> iDR3.SPLUS-n03s21.001338 (178.30862939134568,-3.409047236958316)
  - SN LSQ 12dwl 333.1730416667,0.5119722222 -> iDR3.STRIPE82-0134.016856 (333.17320112679323,0.5119642601996512)
  - QSO 2SLAQ J220529.34-003110.6 331.3722551089 -0.5196284017 -> iDR3.STRIPE82-0131.050516 (331.37225331383246, -0.5196269942518518)
  - WR [BKD2008] WR  14,180.1095,-1.1021666667 -> SPLUS-n02s23.042426 (180.1095757612321 -1.1019334954271696) 
  - CVs spec-0982-52466-0477-STRIPE82-0103-089600.pdf -> final para el paper.
  - H II G, 6dFGS gJ012646.5-003845", (21.694162, -0.646134) -> iDR3.STRIPE82-0031.029096 (21.69378980441009, -0.6457451930656755)
  - Seyfert 1 2SLAQ J204340.03+002853.4                      ->  iDR3.STRIPE82-0102.040352 (310.91682422695794, 0.481551561964735)
    
+ Three spectra from Lamost:
  - STRIPE82-0057.001810 (39.68852506534099 -1.3705561161546969) -> Interesting object could be a SySt.
  - SPLUS-s03s05.011958 (329.5210752335242 -3.1300673601973967) -> Looks like a galaxy.
  - STRIPE82-0084.014280 (57.74100567327152 0.4260298565588763) -> Very week object. It is probably a quasar.

+ Three spectra from SDSS:
  - STRIPE82-0007.024265 (3.6458604175197946 -0.731125956040772)
  - STRIPE82-0147.005730 (343.4952075319428 -1.289144725738761)
  - SPLUS-n02s23.034336 (180.29305577347304 -1.2960504262969996)

+ S-spectra in magnitude unity
  - iDR3.SPLUS-n15s22.026955 (180.482084992802 -18.87855472820429)
  - iDR3.SPLUS-n15s22.024043 (179.74240913634958 -19.02992833661004)
  - iDR3.SPLUS-s02s12.022219 (339.5969264365535 -0.9522370681869864)
  - DR3.SPLUS-n12s32.020869 (194.88643900048527 -15.23870530424191)
  - iDR3.HYDRA-0026.052331  (158.85933642579576 -24.753136157195524)
  - iDR3.SPLUS-n15s20.042930 (177.11120124325876 -18.50628940436583), PN?
    
*** Repeat objects
- iDR3.HYDRA-0012.045435
- iDR3.SPLUS-s24s57.021041
- iDR3.SPLUS-s24s57.030527
- iDR3.SPLUS-s27s12.001173
- iDR3.HYDRA-0012.030069
- iDR3.SPLUS-s27s24.009065
- iDR3.SPLUS-s27s24.040526
- iDR3.SPLUS-s24s57.031431
- iDR3.SPLUS-s27s24.035964
- iDR3.HYDRA-0012.025156
- iDR3.SPLUS-s27s12.021798
*** PNe
- iDR3.HYDRA-0145.120355
*** Possible new CV  
Found in the list of Halpha emitters. The S-spectra is very to those confirmed CVs.
- iDR3.SPLUS-n14s09.024396 (160.9775297560119 -17.75830850106541)
- iDR3.SPLUS-s24s41.036794 (62.896990490717535 -30.370728973400283)
- iDR3.HYDRA-0163.093333   (155.39924683710603	-47.316427665698775)
- iDR3.SPLUS-s27s34.027141 (53.50745961827551	-34.73551729784952)

*** Take in count
- SPLUS-n05n50,iDR3.SPLUS-n05n50.013917 (217.2307884592734,5.0060874486010265):
  Simbad Possible_lensImage or blue.

*** Objects for example

+ iDR3.SPLUS-n03s21.047308

*** Distribution of colors of groups
Making the distributing of colors =r - J0060=, =r - i= and =r=  for each group.

#+BEGIN_SRC python :return filename1 :return filename2 :return filename3 :results file
  import matplotlib.pyplot as plt
  from matplotlib.colors import PowerNorm
  from astropy import units as u
  from astropy.coordinates import SkyCoord
  from astropy.wcs import WCS
  import pandas as pd
  import numpy as np
  from astropy.table import Table
  import seaborn as sns
  import argparse
  import sys
  import os
  import glob
  import json
  import matplotlib.patches as mpatches
  from scipy.stats import gaussian_kde
  from pathlib import Path
  from scipy.cluster.hierarchy import dendrogram, linkage
  import scipy.cluster.hierarchy as shc
  sns.set_color_codes()
  ROOT_PATH = Path("paper/Figs")
  
  table_blue = Table.read("iDR3_n4/Blue0-Good-LD-Halpha-DR3_noFlag_merge-takeoutbad-Final-newColors.ecsv", format="ascii.ecsv")
  table_red = Table.read("iDR3_n4/Red1-Good-LD-Halpha-DR3_noFlag_merge-takeoutbad-Final-newColors.ecsv", format="ascii.ecsv")
  
  # Bar diagram
  fig1, ax1 = plt.subplots(1, 1, figsize=(10, 6), sharex=True)
  plt.xlabel(r"$r - J0660$", fontsize=33)
  plt.ylabel(r"Density", fontsize=33)
  plt.tick_params(axis='x', labelsize=33) 
  plt.tick_params(axis='y', labelsize=33)
  # r_j0660blue = [x for x in table_blue["r - J0660"]]
  # r_j0660red = [x for x in table_red["r - J0660"]]
  r_j0660blue = table_blue["r_PStotal"] - table_blue["J0660_PStotal"]
  r_j0660red =  table_red["r_PStotal"] - table_red["J0660_PStotal"]
  r_j0660blue_ = [x for x in r_j0660blue]
  r_j0660red_ = [x for x in r_j0660red]
  g = sns.distplot(r_j0660blue_, 
		 norm_hist=True, kde=True, ax=ax1,
		 bins=40, hist_kws=dict(color='b'),
		 label = "Blue sources")
  g = sns.distplot(r_j0660red_, 
		 norm_hist=True, kde=True, ax=ax1,
		 bins=40, hist_kws=dict(color='r'),
		 label = "Red sources")
  ax1.set(xlim=[-1.0, 4.1])
  #ax1.legend(loc='upper right', fontsize=18)
  ymax = ax1.get_ybound()[1]
  sns.despine()
  plt.tight_layout()
  filename1="paper/Figs/distribution-Halpha-group-newColor.pdf"
  plt.savefig(filename1)
  ##########################
  # Distribution r - i color
  fig2, ax2 = plt.subplots(1, 1, figsize=(10, 6), sharex=True)
  plt.xlabel(r"$r - i$", fontsize=33)
  plt.ylabel(r"Density", fontsize=33)
  plt.tick_params(axis='x', labelsize=33) 
  plt.tick_params(axis='y', labelsize=33)
  # r_iblue = [x for x in table_blue["r - i"]]
  # r_ired = [x for x in table_red["r - i"]]
  r_iblue = table_blue["r_PStotal"] - table_blue["i_PStotal"]
  r_ired = table_red["r_PStotal"] - table_red["i_PStotal"]
  r_iblue_ = [x for x in r_iblue]
  r_ired_ = [x for x in r_ired]
  sns.distplot(r_iblue_, 
	norm_hist=True, kde=True, ax=ax2,
	bins=50, hist_kws=dict(range=[-3.0, 3.0], color='b')
		)
  sns.distplot(r_ired_, 
	norm_hist=True, kde=True, ax=ax2,
	bins=50, hist_kws=dict(range=[-3.0, 3.0], color='r'),
		label="Red")
  ax2.set(xlim=[-1.8, 2.3])
  #ax2.legend(loc='upper right')
  ymax = ax2.get_ybound()[1]
  sns.despine()
  plt.tight_layout()
  filename2= "paper/Figs/distribution-ri-group-newColor.pdf"
  plt.savefig(filename2)
  #########################
  # Distribution  r-mag
  fig3, ax3 = plt.subplots(1, 1, figsize=(10, 6), sharex=True)
  plt.xlabel(r"$r$", fontsize=33)
  plt.ylabel(r"Density", fontsize=33)
  plt.tick_params(axis='x', labelsize=33) 
  plt.tick_params(axis='y', labelsize=33)
  rblue = [x for x in table_blue["r_PStotal"]]
  rred = [x for x in table_red["r_PStotal"]]
  sns.distplot(rblue, 
  norm_hist=True, kde=True, ax=ax3,
	bins=20, hist_kws=dict(color='b'),
		label = "Blue sources")
  sns.distplot(rred,
	norm_hist=True, kde=True, ax=ax3,
	bins=20, hist_kws=dict(color='r'),
		label = "Red sources")
  #ax3.set(xlim=[-0.7, 1.8])
  ax3.legend(loc='upper left', fontsize=22)
  sns.despine()
  plt.tight_layout()
  filename3="paper/Figs/distribution_r-group-newColor.pdf"
  plt.savefig(filename3)
  
#+END_SRC  

#+RESULTS:
[[file:paper/Figs/distribution_r-group-newColor.pdf]]

For the color =r - i= we got the expected results. I have used normalized hist because
Before we do, another point to note is that, when the subsets have unequal
numbers of observations, comparing their distributions in terms of counts
may not be ideal. One solution is to normalize the counts using the stat parameter:

The y-axis in a density plot is the probability density function for the kernel 
density estimation. However, we need to be careful to specify this is a probability 
density and not a probability. The difference is the probability density is the 
probability per unit on the x-axis. To convert to an actual probability, we need 
to find the area under the curve for a specific interval on the x-axis. Somewhat 
confusingly, because this is a probability density and not a probability, 
the y-axis can take values greater than one. The only requirement of the density 
plot is that the total area under the curve integrates to one. I generally tend 
to think of the y-axis on a density plot as a value only for relative comparisons 
between different categories. 

** SIMBAD
I made cross-match with SIMBAD.
So, working with the SIMBAD sample.

#+name: simbad-data
#+BEGIN_SRC python :tangle /programs/simbad-data.py 
  #from __future__ import print_function
  import numpy as np
  from sklearn import metrics
  from scipy.optimize import curve_fit
  import pandas as pd
  from astropy.table import Table
  import seaborn as sns
  from astropy.stats import sigma_clip
  import matplotlib.pyplot as plt
  from matplotlib.font_manager import FontProperties
  from sklearn.metrics import mean_squared_error
  from astropy.modeling import models, fitting
  import argparse
  import sys
  import os
  from pathlib import Path
  ROOT_PATH = Path("paper/Figs")
  
  df = pd.read_csv("iDR3_n4/simbad.csv")
  print(df.columns)
  
  # MASKs
  m1 = df['main_type'] == 'AGN_Candidate'
  m2 = df['main_type'] == 'AGN'
  m3 = df['main_type'] == 'EmG'
  m4 = df['main_type'] == 'GinGroup'
  m5 = df['main_type'] == 'Galaxy'
  m6 = df['main_type'] == 'Candidate_CV*'
  m7 = df['main_type'] == 'RRLyr'
  m8 = df['main_type'] == 'SN'
  m9 = df['main_type'] == 'HII'
  m11 = df['main_type'] == 'CataclyV*'
  m12 = df['main_type'] == 'FIR'
  m13 = df['main_type'] == 'GinCl'
  m14 = df['main_type'] == 'HII_G'
  m15 = df['main_type'] == 'Seyfert_1'
  m17 = df['main_type'] == 'Star'
  m18 = df['main_type'] == 'PartofG'
  m19 = df['main_type'] == 'RadioG'
  m20 = df['main_type'] == 'IG'
  m21 = df['main_type'] == 'QSO'
  m22 = df['main_type'] == 'EB*'
  m23 = df['main_type'] == 'Radio'
  m24 = df['main_type'] == 'Seyfert_2'
  m26 = df['main_type'] == 'X'
  m27 = df['main_type'] == 'MolCld'
  m28 = df['main_type'] == 'Cl*'
  m29 = df['main_type'] == 'HMXB'
  m30 = df['main_type'] == 'GinPair'
  m31 = df['main_type'] == 'LSB_G'
  m32 = df['main_type'] == 'WD*'
  m33 = df['main_type'] == 'Candidate_RRLyr'
  m34 = df['main_type'] == 'PN'
  m35 = df['main_type'] == 'Blue'
  m36 = df['main_type'] == 'EmObj'
  m37 = df['main_type'] == 'BlueSG*'
  m38 = df['main_type'] == 'StarburstG'
  m39 = df['main_type'] == 'low-mass*'
  m40 = df['main_type'] == 'BlueCompG'
  m41 = df['main_type'] == 'UV'
  m42 = df['main_type'] == 'Candidate_WD*'
  m43 = df['main_type'] == 'MIR'
  m44 = df['main_type'] == 'Radio(cm)'
  m45 = df['main_type'] == 'Candidate_SN*'
  m46 = df['main_type'] == 'QSO_Candidate'
  m47 = df['main_type'] == 'BLLac'
  m48 = df['main_type'] == 'PM*'
  m49 = df['main_type'] == 'Possible_lensImage'
  m51 = df['main_type'] == 'Nova'
  m52 = df['main_type'] == 'BClG'
  m53 = df['main_type'] == 'GlCl'
  
  # Making the tables with individual object classes
  df_agn = pd.concat([df[m1], df[m2]])
  df_EmG = pd.concat([df[m3], df[m14], df[m38], df[m40]])
  df_GinGroup = df[m4]
  df_pn = df[m34] 
  df_gal = df[m5]
  df_qso = pd.concat([df[m21], df[m46]])
  df_cv = pd.concat([df[m6], df[m11]])
  df_hii = df[m9]
  df_star = df[m17]
  df_sn = pd.concat([df[m8], df[m45]])
  df_rrly = pd.concat([df[m7], df[m33]])
  df_fir = df[m12]
  df_GinCl = df[m13]
  df_Seyfert_1 = df[m15]
  df_Seyfert_2 = df[m24]
  df_PartofG = df[m18]
  df_RadioG = df[m19]
  df_IG = df[m20]
  df_EB = df[m22]
  df_Radio = pd.concat([df[m23], df[m44]])
  df_X = df[m26]
  df_MolCld = df[m27]
  df_cl = df[m28]
  df_HMXB = df[m29]
  df_GinPair = df[m30]
  df_LSB_G = df[m31]
  df_WD = pd.concat([df[m32], df[m42]])
  df_Blue = df[m35]
  df_EmObj = df[m36]
  df_BlueSG = df[m37]
  df_low_mass = df[m39]
  df_uv = df[m41]
  df_mier = df[m43]
  df_BLLac = df[m47]
  df_pm = df[m48]
  df_Possible_lensImage = df[m49]
  df_nova = df[m51]
  df_bclg = df[m52]
  df_glcl = df[m53]
  
  # Countaining the sources of each class 
  list_numbers = ["H II regions", "PN", "CV", "SN", "Nova", "BL Lac",
		  "Variable Star of RR Lyr type",
		  "Star", "WD", "Cluster of Stars", "HMXB", "Far-Infrared source",
		  "Eclipsing binary", "Blue object", "Emission Object", "Blue supergiant star",
		  "Low-mass star", "UV-emission source", "MIER", "Possible lens Image"
		  "Galaxy", "Galaxy in Pair of Galaxies",
		  "Emission line galaxies",
		  "QSO", "AGN", "Part of a Galaxy", "X-ray source", "Molecular Cloud",
		  "Galaxy in Group of Galaxies", "Radio-source", "Interacting Galaxies",
		  "Low Surface Brightness Galaxy", "Radio Galaxy", "Galaxy in Cluster of Galaxies"
		  "High proper-motion Star", "Seyfert 1", "Seyfert 2",
		  "Brightest galaxy in a Cluster", "Globular Cluster"]
  
#+END_SRC

#+BEGIN_SRC python :return filename :results file :noweb yes
  <<simbad-data>>
  
  # Definition to make the colors
  def colour(tab, f1, f2, f3, f4):
      xcolour = tab[f1] - tab[f2]
      ycolour = tab[f3] - tab[f4]
      return xcolour, ycolour
  
  # Colors
  cx_pn, cy_pn = colour(df_pn, "Z_PStotal", "G_PStotal", "G_PStotal", "R_PStotal")
  cx_gal, cy_gal = colour(df_gal, "Z_PStotal", "G_PStotal", "G_PStotal", "R_PStotal")
  cx_EmG, cy_EmG = colour(df_EmG, "Z_PStotal", "G_PStotal", "G_PStotal", "R_PStotal")
  cx_qso, cy_qso = colour(df_qso, "Z_PStotal", "G_PStotal", "G_PStotal", "R_PStotal")
  cx_cv, cy_cv = colour(df_cv, "Z_PStotal", "G_PStotal", "G_PStotal", "R_PStotal")
  cx_hii, cy_hii = colour(df_hii, "Z_PStotal", "G_PStotal", "G_PStotal", "R_PStotal")
  cx_star, cy_star = colour(df_star, "Z_PStotal", "G_PStotal", "G_PStotal", "R_PStotal")
  
  #PLOT
  # Limiting the blue and red region
  x_new = np.linspace(-15.0, 1000, 200)
  y = 0.45*x_new + 1.55
  
  fig, ax = plt.subplots(figsize=(12, 12))
  
  ax.fill_between(x_new, y, -100, color="k", alpha=0.1)
  ax.plot(x_new, y, c="k", zorder=11, lw=0.5)
  
  plt.tick_params(axis='x', labelsize=25) 
  plt.tick_params(axis='y', labelsize=25)
  
  plt.xlabel(r'$z - g$', fontsize= 25)
  plt.ylabel(r'$g - r$', fontsize= 25)
  
  ax.scatter(
	  cx_pn, cy_pn,
	  marker="o",
	  c=sns.xkcd_rgb["cerulean"],
	  label="PN",
	  edgecolors="w", alpha=0.7, zorder=4
      )
  
  ax.scatter(
	  cx_gal, cy_gal,
	  marker="o",
	  c=sns.xkcd_rgb["dark pink"],
	  label="Galaxy",
	  edgecolors="w", zorder=3
      )
  
  ax.scatter(
	  cx_EmG, cy_EmG,
	  marker="o",
	  c=sns.xkcd_rgb["bright blue"],
	  label="EmG",
	  edgecolors="w", zorder=3
      )
  
  ax.scatter(
	  cx_qso, cy_qso,
	  marker="o",
	  c=sns.xkcd_rgb["green"],
	  label="QSO",
	  edgecolors="w", zorder=3
      )
  
  ax.scatter(
	  cx_cv, cy_cv,
	  marker="o",
	  c=sns.xkcd_rgb["periwinkle"],
	  label="CV",
	  edgecolors="w", zorder=5
      )
  
  ax.scatter(
	  cx_hii, cy_hii,
	  marker="o",
	  c=sns.xkcd_rgb["pale yellow"],
	  label="HII Region",
	  edgecolors="w", zorder=4
      )
  
  ax.scatter(
	  cx_star, cy_star,
	  marker="o",
	  c=sns.xkcd_rgb["army green"],
	  label="Star",
	  edgecolors="w", zorder=6
      )
  
  
  ax.legend(ncol=1, fontsize=20.0, title_fontsize=30)
  ax.set(xlim=[-6.8, 2.5], ylim=[-3., 5.])#, xscale="log", yscale="log")
  ax.set_aspect("equal")
  #ax.set(xlabel=r"$z - g$", ylabel=r"$g - r$")
  
  filefile ="colour-digram-simbadObj.pdf"
  fig.savefig(ROOT_PATH / filefile)
  
  # Saving subtables (QSO)
  print(df_qso)
  filename = "iDR3_n4/QSO-simabad.ecsv"
  Table.from_pandas(df_qso).write(filename, format="ascii.ecsv")
  
  
#+END_SRC

#+RESULTS:
[[file:iDR3_n4/QSO-simabad.ecsv]]

#+RESULTS: simbad-data
[[file:iDR3_n4/QSO-simabad.ecsv]]
[[file:Index(['Field', 'ID', 'RA', 'DEC', 'FWHM', 'FWHM_n', 'A', 'B', 'ISOarea',
       'KRON_RADIUS', 'PhotoFlagDet', 's2n_Det_iso', 'U_PStotal',
       'F378_PStotal', 'F395_PStotal', 'F410_PStotal', 'F430_PStotal',
       'G_PStotal', 'F515_PStotal', 'R_PStotal', 'F660_PStotal', 'I_PStotal',
       'F861_PStotal', 'Z_PStotal', 'e_U_PStotal', 'e_F378_PStotal',
       'e_F395_PStotal', 'e_F410_PStotal', 'e_F430_PStotal', 'e_G_PStotal',
       'e_F515_PStotal', 'e_R_PStotal', 'e_F660_PStotal', 'e_I_PStotal',
       'e_F861_PStotal', 'e_Z_PStotal', 'F378_iso', 'F395_iso', 'F410_iso',
       'F430_iso', 'G_iso', 'F515_iso', 'R_iso', 'F660_iso', 'I_iso',
       'F861_iso', 'Z_iso', 'e_U_iso', 'e_F378_iso', 'e_F395_iso',
       'e_F410_iso', 'e_F430_iso', 'e_G_iso', 'e_F515_iso', 'e_R_iso',
       'e_F660_iso', 'e_I_iso', 'e_F861_iso', 'e_Z_iso', 'r - i', 'r - J0660',
       'e(r - i)', 'e(r - J0660)', 'P(GoodPho)', 'P(BadPho)', 'main_id',
       'ra_x', 'dec_x', 'coo_err_maj', 'coo_err_min', 'coo_err_angle', 'nbref',
       'ra_sexa', 'dec_sexa', 'main_type', 'other_types', 'radvel', 'redshift',
       'sp_type', 'morph_type', 'plx', 'pmra', 'pmdec', 'size_maj', 'size_min',
       'size_angle', 'B_x', 'V', 'R_x', 'J', 'H', 'K', 'u', 'g', 'r_xa', 'i',
       'z', 'angDist'],
      dtype='object')
              Field                         ID  ...       z   angDist
39     SPLUS-n12s01   iDR3.SPLUS-n12s01.020886  ...     NaN  0.169442
52    STRIPE82-0004  iDR3.STRIPE82-0004.031191  ...  16.267  0.145873
55    STRIPE82-0104  iDR3.STRIPE82-0104.027921  ...  16.986  0.103838
65     SPLUS-n09s43   iDR3.SPLUS-n09s43.035461  ...     NaN  0.147378
66     SPLUS-n10s36   iDR3.SPLUS-n10s36.018587  ...     NaN  0.539756
...             ...                        ...  ...     ...       ...
1045   SPLUS-n02n27   iDR3.SPLUS-n02n27.022071  ...  20.729  0.040387
1046   SPLUS-n02s19   iDR3.SPLUS-n02s19.000577  ...  20.790  0.266297
1048   SPLUS-n02s37   iDR3.SPLUS-n02s37.051418  ...  20.486  0.136084
1049   SPLUS-s35s45   iDR3.SPLUS-s35s45.031885  ...     NaN  1.500802
787   STRIPE82-0074  iDR3.STRIPE82-0074.040778  ...  19.410  0.102930

[225 rows x 98 columns]
]]

*** QSOs
    SCHEDULED: <2021-07-28 qua>

Trying to get the Redshift of the QSOs from simbad.

#+name: QSO-simbad
#+BEGIN_SRC python :tangle /programs/simbad-QSO.py :return asciifile :results file
  from astroquery.simbad import Simbad
  import astropy.coordinates as coord
  import astropy.units as u
  from astropy.table import Table, hstack
  from astropy.coordinates import SkyCoord 
  import numpy as np
  from scipy.constants import constants
  
  # Read the table
  tab = Table.read("iDR3_n4/QSO-simabad.ecsv", format="ascii.ecsv")
  #Looking the objects of the table in Simbad and specifying the column wanted of Simbad
  customSimbad = Simbad()
  customSimbad.get_votable_fields()
  #customSimbad.list_votable_fields()
  customSimbad.add_votable_fields('sptype', 'otype','distance', "velocity")
  customSimbad.add_votable_fields("uvby")
  customSimbad.add_votable_fields('ra(d)', 'dec(d)')
  customSimbad.add_votable_fields('bibcodelist(1990-2020)')#, 'biblio')
  ## get redshift of object
  customSimbad.add_votable_fields("rv_value") 
  result_table = customSimbad.query_region(coord.SkyCoord(tab["RA"], tab["DEC"], 
						 unit=(u.deg, u.deg)), radius = 2.0 * u.arcsec)
  
  #Calculating redshift
  rv = result_table["RV_VALUE"].quantity.data[0]*1000 # rv in m / s
  z = rv / constants.c
  
  result_table["Redshift"] = z
  
  #save the table resulting
  asciifile = "iDR3_n4/QSO-simabad-redshift.ecsv"
  result_table.write(asciifile, format="ascii.ecsv")  
  
#+END_SRC

#+RESULTS: QSO-simbad
[[file:iDR3_n4/QSO-simbad-redshift.ecsv]]

+ <2021-08-03 ter> Making latex file with number of each class of objects with matches on SIMBAD.
  I decided to make the table by hand. So I just will to make a table with the number of
  each class of objects.
  
#+BEGIN_SRC python :return filejson :results file :noweb yes
  import json
  <<simbad-data>>
  dict_class = {"H II regions": len(df_hii),
		"PN": len(df_pn),
		"CV": len(df_cv),
		"SN": len(df_sn),
		"Nova": len(df_nova),
		"BL Lac": len(df_BLLac),
		"RR Lyr": len(df_rrly),
		"Star": len(df_star),
		"WD": len(df_WD),
		"Cluster of Stars": len(df_cl),
		"HMXB": len(df_HMXB),
		"Far-Infrared source": len(df_fir),
		"Eclipsing binary": len(df_EB),
		"Blue object": len(df_Blue),
		"Emission Object": len(df_EmObj),
		"Blue supergiant star": len(df_BlueSG),
		"Low-mass star": len(df_low_mass),
		"UV-emission source": len(df_uv),
		"MIER": len(df_mier),
		"Possible lens Image": len(df_Possible_lensImage),
		"Galaxy": len(df_gal),
		"Galaxy in Pair of Galaxies": len(df_GinPair),
		"Emission line galaxies": len(df_EmG),
		"QSO": len(df_qso),
		"AGN": len(df_agn),
		"Part of a Galaxy": len(df_PartofG),
		"X-ray source": len(df_X),
		"Molecular Cloud": len(df_MolCld),
		"Galaxy in Group of Galaxies": len(df_GinGroup),
		"Radio-source": len(df_Radio),
		"Interacting Galaxies": len(df_IG),
		"Low Surface Brightness Galaxy": len(df_LSB_G),
		"Radio Galaxy": len(df_RadioG),
		"Galaxy in Cluster of Galaxies": len(df_GinCl),
		"High proper-motion Star": len(df_pm),
		"Seyfert 1": len(df_Seyfert_1),
		"Seyfert 2": len(df_Seyfert_2),
		"Brightest galaxy in a Cluster": len(df_bclg),
		"Globular Cluster": len(df_glcl)}
  filejson = "iDR3_n4/simbad-data.json"
  with open(filejson, "w") as f:
      json.dump(dict_class, f, indent=2)
  
#+END_SRC

#+RESULTS:
[[file:iDR3_n4/simbad-data.json]]


+  Now, we need to do the table latex with the Redshift:


#+name: table-qso-redshift
#+BEGIN_SRC python  :return table 
  from astropy.table import Table
  import astropy.coordinates as coord
  import astropy.units as u
  from astropy.coordinates import SkyCoord 
  import sys
  import numpy as np
  
  # Some definitions
  def format_RA(ra):
      return coord.Angle(ra, unit=u.deg).to_string(u.hour, sep=':', precision=2, pad=True)
  
  def format_DEC(dec):
    s = coord.Angle(dec, unit=u.deg).to_string(sep=':', precision=1, pad=True)
    if s.startswith('-'):
	return r'$-$' + s[1:]
    else:
	return s
  
  def coor_fmt(a):
       return "{:.2f}".format(a) 
  
  def z_fmt(z):
      return "{:.2f}".format(z) 
  
  
  # Read the table
  tab = Table.read("iDR3_n4/QSO-simabad.ecsv", format="ascii.ecsv")
  
  # Selected columns
  table = [["ID", "RA", "DEC", "main_type", "redshift"], None]
  
  latex_columns = ['Id Simbad', 'RA', 'DEC',
		 r'Type',
		 r'Redshift'
		 ]
  
  column_formats = {}
  
  column_formats['RA'] = format_RA
  column_formats['DEC'] = format_DEC
  column_formats['redshift'] = z_fmt
  
  tab.sort('RA')
  id_ = tab["main_id"]
  ra = tab["RA"]
  dec = tab["DEC"]
  main = tab["main_type"]
  red = tab["redshift"]
  
  for a, b, c, d, e in zip(id_, ra, dec, main, red):
      table.append([a, b, c, d, e])
  
#+END_SRC

#+RESULTS: table-qso-redshift
| ID                           |                 RA |                 DEC | main_type     | redshift |
|------------------------------+--------------------+---------------------+---------------+----------|
| QSO B2359+005                | 0.6279554824066291 |  0.8331230804411939 | QSO           |  1.35421 |
| SDSS J000637.99-003656.2     |  1.658281373282977 | -0.6156060790712984 | QSO           |    4.435 |
| LBQS 0004+0036               |  1.791687271704504 |  0.8914261244525057 | QSO           |  0.31564 |
| SDSS J000809.34+004935.5     |  2.038930048182944 |  0.8264638152844974 | QSO           |    3.293 |
| [VV2006] J001040.1-294428    |  2.666987531261032 | -29.740921877458867 | QSO           |    1.361 |
| [VV2006] J001228.8-310241    | 3.1199364195988752 |  -31.04443153319788 | QSO           |     1.36 |
| 2SLAQ J001526.52+001813.2    |  3.860510825587982 |  0.3037236200425542 | QSO           |   1.3623 |
| [VV2006] J001535.5+005355    |  3.898110576074378 |  0.8989176411595012 | QSO           |  1.35826 |
| [VV2006] J001641.9-312657    |  4.174451424491121 |  -31.44905004903269 | QSO           | 0.360399 |
| 2SLAQ J001731.27-004859.3    |  4.380258459418438 | -0.8164386494043362 | QSO           |  1.35653 |
| SDSS J001753.82+005057.6     |  4.474256625814649 |  0.8493703288672522 | QSO           | 1.357714 |
| 2SLAQ J001912.39+000319.6    |  4.801640792188885 |  0.0554916881824542 | QSO           |   1.3718 |
| 2SLAQ J001940.23-005435.9    |  4.917646791908225 | -0.9099503373848068 | QSO           |   1.3739 |
| [VV2006] J001950.1-004040    |  4.958578954314056 | -0.6779700699260857 | QSO           |     4.34 |
| 2SLAQ J002237.90+000519.0    |  5.657902318221463 |  0.0886788337120439 | QSO           |   1.3727 |
| SDSS J002940.01+010528.5     |  7.416749471161749 |  1.0913027872498264 | QSO           |    1.387 |
| SDSS J003117.70+001705.0     |  7.823701945596341 |  0.2847385223835051 | QSO           |  4.33499 |
| 2SLAQ J003208.53-005303.7    |  8.035561688713287 | -0.8843461346218345 | QSO           |   1.3436 |
| SDSS J003234.62-001557.1     |  8.144241522878199 | -0.2658504803749659 | QSO           |    3.243 |
| [VV2006] J003242.7+003111    |  8.178072183921541 |  0.5197450140043085 | QSO           |  0.36039 |
| [VV2006] J003545.9+002306    |  8.941080203860544 |  0.3849934246315855 | QSO           |  3.23707 |
| [VV2006] J003714.1-005602    |  9.308785545285224 | -0.9344374247364892 | QSO           | 4.361334 |
| [VV2006] J003722.2-001140    |  9.342361420176386 | -0.1946009608261733 | QSO           |  1.37028 |
| SDSS J003859.34-004252.2     |  9.747289111980264 |  -0.714454350224955 | QSO           |  2.50232 |
| GALEX 2673249256393934953    | 10.682789961127495 |   1.283933341653539 | QSO           | 1.366473 |
| SDSS J004415.83-004303.1     | 11.065875879315966 |  -0.717518646194803 | QSO           |    3.248 |
| [VV2006] J004544.4-315729    | 11.434797546075147 |  -31.95811304109312 | QSO           |    1.344 |
| [VV98] J004826.9-341340      | 12.112387692202818 |  -34.22741726899439 | QSO           |     1.91 |
| SDSS J004918.52+011308.9     |  12.32716144605164 |  1.2191920530524625 | QSO           |   1.3385 |
| QSO B0049-272                |  12.98183382570476 | -26.962028288894874 | QSO           |    2.484 |
| SDSS J005343.78+012147.6     |  13.43231563480846 |   1.363190953245345 | QSO           |  1.35759 |
| QSO B0052-307                | 13.683104869130515 |  -30.51502373758133 | QSO           |     2.45 |
| [VV2006] J005532.1-311538    | 13.883649917774902 | -31.260498014964096 | QSO           |     1.35 |
| [VV2006] J005609.9-312209    |  14.04137683954713 |  -31.36906110248861 | QSO           |     2.46 |
| [VV2006] J005639.0-315759    | 14.162698397718229 |  -31.96627152132016 | QSO           |     1.35 |
| [VV2000] J005840.5-300203    | 14.668422466041417 |  -30.03336355079838 | QSO           |   1.3614 |
| LBQS 0057-0135               | 14.953354509073169 | -1.3181152771969302 | QSO           |    0.325 |
| QSO B0057-3948               | 14.971706058633467 |  -39.53259262490825 | QSO           |     3.24 |
| QSO B0059-304B               | 15.561054131595537 |  -30.13160407774772 | QSO           |     3.24 |
| [VV2006] J010336.4-005508    | 15.901621012754958 | -0.9191165595206996 | QSO           |   2.4428 |
| SDSS J010413.86-011552.1     |  16.05775922175709 |  -1.264431931617225 | QSO           | 1.365982 |
| QSO B0103+00                 | 16.580131544341818 |  0.8064950808416276 | QSO           |  4.43489 |
| [VV2006] J010705.6+000609    |  16.77312563028888 |  0.1024885367041135 | QSO           |  1.35705 |
| 2SLAQ J010907.59+000649.8    |  17.28164156677598 |  0.1138851962867193 | QSO           |   1.3722 |
| SDSS J010918.56+005419.3     |  17.32733457723796 |    0.90539845012828 | QSO           | 1.356154 |
| 2SLAQ J010925.95-003739.0    |  17.35815775854618 | -0.6275003706886488 | QSO           | 1.359816 |
| SDSS J011128.38+000143.7     |  17.86813658313074 |  0.0286974483465913 | QSO           | 0.765336 |
| 2SLAQ J011230.55+001441.5    |  18.12729657912228 |  0.2449304176402998 | QSO           |  3.25884 |
| [VV2006] J011405.3-310903    | 18.521860772867413 | -31.150780875277498 | QSO           |    1.333 |
| 2SLAQ J011542.18+002300.2    |  18.92575064401607 |  0.3834537397700357 | QSO           |   1.3726 |
| 2SLAQ J011818.13+001455.2    |  19.57552004108609 |  0.2487480482840988 | QSO           | 1.371634 |
| 2SLAQ J012110.74-005037.2    |  20.29473653398262 | -0.8436434200227299 | QSO           | 1.351602 |
| 2SLAQ J012226.76+000327.5    | 20.611445353426262 |  0.0577366753714225 | QSO           |  2.48045 |
| QSO B0120-002                |  20.75741214062869 |  0.0565525553589094 | QSO           |  1.35617 |
| QSO B0121-324                | 21.067433955055776 |  -32.20603385094096 | QSO           |    1.358 |
| QSO B0122-3232               |  21.26913199118856 |  -32.28740231179497 | QSO           |     2.45 |
| SDSS J013034.18-002106.6     | 22.642393025135533 | -0.3518162354106257 | QSO           |   3.2343 |
| [VV2006] J013500.8-004054    | 23.753457358462345 | -0.6817256241073724 | QSO           |  1.00706 |
| SDSS J013701.72-012059.3     | 24.257111717644538 | -1.3497465276851617 | QSO           |    2.496 |
| [VV2006] J013729.4-320715    |   24.3725070057774 |  -32.12103455786598 | QSO           |    1.368 |
| [VV2006] J013837.3+002818    | 24.655329021886622 |  0.4717925959967649 | QSO           |  1.34801 |
| 2SLAQ J013951.07+002537.9    | 24.962782843879992 |  0.4272217892643302 | QSO           | 1.341863 |
| SDSS J014125.63+000755.6     |  25.35682525075279 |  0.1321647769641862 | QSO           | 0.322432 |
| [VV2006] J014224.7-320414    |  25.60303358518956 |  -32.07047314351019 | QSO           |     2.46 |
| [VV2006] J014303.6-295255    | 25.764557663482428 |  -29.88188949191848 | QSO           |     2.45 |
| SDSS J014721.12-004505.3     |  26.83799104587179 | -0.7514735524191466 | QSO           | 1.348128 |
| [VV2006] J014739.2-285259    | 26.913386215352126 | -28.883097657544933 | QSO           |     0.36 |
| [VV2006] J014739.2-285259    |   26.9133952038632 |  -28.88312791748778 | QSO           |     0.36 |
| [VV2006] J014812.2+000154    |  27.05101817682357 |  0.0315348188803727 | QSO           |    1.712 |
| [VV2006] J014921.5-003220    |  27.33969542295298 | -0.5391525524002503 | QSO           |  1.37898 |
| 2SLAQ J015331.85+002252.8    |  28.38271202195532 |  0.3813754396509161 | QSO           |   1.3674 |
| 2SLAQ J015409.27+002645.2    |  28.53861595248377 |  0.4459129033998668 | QSO           |    1.355 |
| [VV2006] J015410.9-285214    | 28.545594305017943 | -28.870735753209058 | QSO           |    1.356 |
| [VV2006] J015415.4-285254    | 28.564494450701485 |   -28.8819264781154 | QSO           |    1.344 |
| [VV2006] J015832.1-301703    |  29.63394027051608 | -30.284120909894927 | QSO           |     1.38 |
| [VV2006] J015832.1-301703    |  29.63398878244968 |  -30.28409277206394 | QSO           |     1.38 |
| [VV2006] J015850.2-300438    |  29.70926847240945 | -30.077239118059776 | QSO           |    1.351 |
| [VV2006] J015935.4+000401    |  29.89784479360552 |  0.0670730705671857 | QSO           |   3.2768 |
| SDSS J020025.40+002916.5     | 30.105854148548683 |  0.4879895823228443 | QSO           |   0.3126 |
| [VV2006] J020055.0-293527    |  30.22926062206253 |  -29.59069575111854 | QSO           |    1.349 |
| [VV98] J020115.4+003136      |  30.31471271654344 |  0.5264157435180954 | QSO           |   0.3625 |
| 2SLAQ J020200.06-000921.2    | 30.500247645814035 |  -0.155885605135301 | QSO           |   1.3589 |
| [VV96] J020435.5-455923      |  31.14774462904211 |  -45.99000661095606 | QSO           |     3.24 |
| 2SLAQ J020804.48-000023.2    |  32.01870359151427 | -0.0063899756832095 | QSO           |   1.3394 |
| 2SLAQ J020827.06-005208.1    |  32.11278143734105 | -0.8688706450161886 | QSO           |   1.3414 |
| SDSS J020921.99-005455.5     |  32.34166379711758 | -0.9153964683450352 | QSO           |   1.3666 |
| 2SLAQ J021529.02-005314.8    |  33.87092614743144 | -0.8874609989930496 | QSO           |   1.3686 |
| SDSS J021617.19-011046.9     |  34.07162177605453 |   -1.17963313592842 | QSO           |   3.2639 |
| 2SLAQ J021810.52-010147.4    | 34.543835265892945 | -1.0297901208560476 | QSO           |   1.3534 |
| [VV2006] J022738.3-313627    |  36.90951623742346 | -31.607345845404307 | QSO           |     1.35 |
| [VV2006] J022758.2+000226    |  36.99250641431996 |  0.0404421118141437 | QSO           |    1.066 |
| SDSS J023230.63-011654.5     |  38.12763748929023 | -1.2817952492366265 | QSO           |    1.364 |
| [VV2006] J023335.4-010744    |  38.39735766972906 | -1.1290537121536242 | QSO           |   0.3675 |
| [VV2006] J023635.7-003203    |  39.14871940890983 | -0.5342706372644691 | QSO           |    1.362 |
| SDSS J024059.15+004545.8     |  40.24643683967374 |  0.7627476177593495 | QSO           |    3.233 |
| [VV2006] J024235.0-010351    |   40.6454475160122 | -1.0644227483678184 | QSO           |    1.373 |
| Gaia DR2 2497764348684940160 |  41.60311859466317 | -0.5045181639339942 | QSO           |   masked |
| 2SLAQ J025100.64+001707.2    |  42.75267977777988 |  0.2853735115843281 | QSO           |  2.46635 |
| 2SLAQ J025252.02-002211.7    |  43.21668023139433 | -0.3698979850578264 | QSO           | 1.370345 |
| QSO B0253+0058               | 44.030210339218165 |  1.1774555299992029 | QSO           |    1.349 |
| LBQS 0302-0019               |  46.20769411378219 | -0.1370507568661265 | QSO           |    3.295 |
| LBQS 0303+0110               |  46.55298185202796 |  1.3659244829765935 | QSO           |    1.335 |
| 2SLAQ J030757.55+000712.0    |  46.98979992986573 |   0.120017369478221 | QSO           |  1.34257 |
| 2SLAQ J031129.69-001701.4    |  47.87373270347458 | -0.2837361426333072 | QSO           |   1.3566 |
| [VV2006] J031845.2-001844    |  49.68820265523018 | -0.3125867996899615 | QSO           |  3.22419 |
| 2SLAQ J031937.30-002641.1    | 49.905357996326025 | -0.4447129467729893 | QSO           |   1.3705 |
| SDSS J032244.90+004442.4     |  50.68707745560916 |  0.7450965554947673 | QSO_Candidate |  0.30433 |
| SDSS J033226.29-011126.2     |  53.10952432881614 | -1.1905549158813071 | QSO           |   1.3613 |
| SDSS J033226.29-011126.2     |  53.10958810574174 |  -1.190642242028551 | QSO           |   1.3613 |
| [VV2006] J033458.5-000744    |  53.74365145217437 | -0.1288517115468432 | QSO           |  1.35731 |
| [VV2006] J033821.6+003106    |  54.58960430404596 |  0.5184971700047292 | QSO           |  1.34902 |
| [VV2006] J033927.5-344707    |  54.86439460038415 |  -34.61862342769125 | QSO           |    1.364 |
| [VV2006] J034023.0-351606    |  55.09580981936138 |  -35.26861884407053 | QSO           |    1.372 |
| [VV2006] J034408.3-003106    |  56.03437204036832 | -0.5182824235374773 | QSO           |  1.64556 |
| SDSS J034517.02-001549.8     |  56.32088432677072 | -0.2638128432166242 | QSO           |   1.3345 |
| QSO B0401-3505               | 60.794009739694005 |  -34.94910807950281 | QSO           |    3.251 |
| [VV96] J041130.5-335331      | 62.877144254160285 |  -33.89197020875841 | QSO           |     1.35 |
| 2QZ J100215.7-001056         | 150.56596957389203 | -0.1821573352244082 | QSO           |    0.353 |
| [VV96] J100342.1-150808      |  150.9246975604601 | -15.135802684821307 | QSO           |    0.342 |
| [VV2006] J100539.9+040914    | 151.41616300935794 |   4.154090690739466 | QSO           |  1.35528 |
| [VV96] J101821.7-214008      | 154.59067560656675 |  -21.66881849744636 | QSO           |     2.47 |
| [VV96] J111644.8-171127      |  169.1815896684582 | -17.194855188675877 | QSO           |    0.375 |
| LBQS 1136-0109               |  174.7681233226218 | -1.4402891840929772 | QSO           |  1.37545 |
| SDSS J114329.34-020319.7     |  175.8722683259682 | -2.0554055350002094 | QSO           |   3.3035 |
| SDSS J114329.34-020319.7     |  175.8722971552406 | -2.0555300405054746 | QSO           |   3.3035 |
| SDSS J114643.10+011118.6     |  176.6796613966468 |  1.1885571745316508 | QSO           |   3.2202 |
| [VV2006] J114939.6+014624    | 177.41500197480892 |   1.773741489322032 | QSO           |  1.36233 |
| [VV2006] J115049.2-005149    | 177.70537423275803 | -0.8636364611502556 | QSO           |    1.354 |
| [VV2006] J115345.5-024320    |  178.4393258721732 |  -2.722344158881375 | QSO           |    1.347 |
| [VV2006] J115748.0+014320    |  179.4500979791226 |   1.722464633451602 | QSO           |  1.36426 |
| [VV2006] J115754.2-013815    | 179.47609913312544 | -1.6377672684560611 | QSO           |     4.38 |
| SDSS J120021.76-024331.0     |  180.0906960738449 |   -2.72525835885637 | QSO           |   3.2477 |
| [VV2006] J120038.3+011246    | 180.15952618608105 |  1.2129112212203663 | QSO           |  1.35786 |
| QSO B1158-1842               |  180.1873094362587 | -18.995686347147792 | QSO           |    2.453 |
| QSO B1158+007                | 180.34692325828544 |  0.4745788784794196 | QSO           |   1.3693 |
| [VV2006] J120700.4+011155    |  181.7517098625927 |  1.1990112046487067 | QSO           |     1.52 |
| SDSS J120920.53-002855.3     | 182.33562177580043 | -0.4820361729402547 | QSO           |  3.23735 |
| [VV2006] J121010.8-003909    |   182.545072752764 | -0.6527062334835679 | QSO           |    1.008 |
| SDSS J121435.24-015924.4     |  183.6469096827458 |  -1.990114618560348 | QSO           |    3.233 |
| [VV2006] J121515.2-013542    | 183.81343790615867 | -1.5946745490378629 | QSO           |     1.35 |
| QSO B1216+0216               | 184.73251321873693 |  2.0005938638657152 | QSO           |  0.32709 |
| [VV2006] J121942.5-001821    |  184.9269721119905 | -0.3059539785935566 | QSO           |  1.33689 |
| [VV2006] J122130.9+010727    | 185.37906214223312 |   1.124474721489336 | QSO           |  1.36996 |
| 2SLAQ J122421.12+002354.1    | 186.08805453702857 |  0.3984481006440221 | QSO           |   0.3337 |
| [VV2006] J122625.7+011604    |  186.6069592196776 |   1.267941658397558 | QSO           |  2.47811 |
| [VV2006] J122707.1+010811    | 186.77970923418985 |  1.1364780564297168 | QSO           |  2.18919 |
| [VV96] J130243.5-135553      | 195.68164279128675 | -13.931326571318332 | QSO           |    1.391 |
| QSO B1317-122                | 199.99667654428632 | -12.487991060254044 | QSO           |    0.329 |
| SDSS J132023.46-004730.9     |  200.0977807916915 | -0.7918937289501875 | QSO           |    3.255 |
| QSO B1352-104                | 208.69386729420503 | -10.684057890909807 | QSO           |     0.33 |
| [VV2006] J135602.8-022624    |  209.0116324685152 | -2.4398085262225853 | QSO           |    1.373 |
| 2MASS J14265388+0525172      |  216.7245347178442 |   5.421495966728137 | QSO           |  0.32283 |
| SDSS J145344.51+045645.8     | 223.43549771425327 |   4.946107899138475 | QSO           |  3.32837 |
| SDSS J200143.74+004918.4     |  300.4321955778412 |  0.8217833390436116 | QSO           |   masked |
| SDSS J202906.80+005453.5     |  307.2783691077352 |  0.9148870344062292 | QSO           |   masked |
| SDSS J204626.10+002337.7     |  311.6087878150387 |  0.3938280343112397 | QSO           |   0.3323 |
| [VV2006] J204956.6-001201    |  312.4859068430339 | -0.2004724242450093 | QSO           |  0.36928 |
| [VV2006] J204956.6-001201    | 312.48592414481044 |  -0.200477643373699 | QSO           |  0.36928 |
| [VV2006] J205316.7+005920    |  313.3198559349733 |  0.9892076810353208 | QSO           |  4.29875 |
| 2SLAQ J205352.03-001601.5    |   313.466816984702 | -0.2670765601766264 | QSO           |  0.36263 |
| 2SLAQ J205712.69+001211.3    |   314.302863294349 |  0.2031735829473498 | QSO           |    0.335 |
| SDSS J205740.76+005418.5     |  314.4198074848838 |  0.9052857685742688 | QSO           |    0.332 |
| QSO B2059-330                |  315.6737967478414 |  -32.87890999401036 | QSO           |     3.28 |
| QSO B2059-330                | 315.67381555407934 |  -32.87898718209263 | QSO           |     3.28 |
| LBQS 2128-4555               |  322.8730471709395 | -45.697352338099286 | QSO           |    0.623 |
| 2MASS J21333817+0126291      |   323.408936906668 |  1.4413770493499043 | QSO           |   1.0044 |
| SDSS J213455.08+001056.9     | 323.72952597635833 |  0.1824349898807966 | QSO           |   3.2888 |
| WISEA J213649.75-012852.2    | 324.20730055187585 |  -1.481159088195661 | QSO           |     3.28 |
| QSO B2134-453                | 324.53121345495185 |  -45.13834354299933 | QSO           |     4.36 |
| 2SLAQ J214106.46+004733.3    |  325.2768379376971 |  0.7926481060166569 | QSO           |  2.45201 |
| SDSS J214155.04-011734.3     | 325.47932878054104 |  -1.292825833976646 | QSO           |    3.286 |
| SDSS J214155.04-011734.3     |   325.479329853818 |  -1.292849791540993 | QSO           |    3.286 |
| SDSS J215002.69+011343.8     |  327.5112425223878 |  1.2288440704579693 | QSO           |  3.26748 |
| 2SLAQ J215010.52-001000.6    | 327.54385873207247 | -0.1668265647596742 | QSO           |  0.33481 |
| 2SLAQ J220529.34-003110.6    | 331.37225331383246 | -0.5196269942518518 | QSO           |  2.45421 |
| [VV2006] J220852.0-010603    |  332.2165318654766 | -1.1010232176217527 | QSO           |  0.35149 |
| [VV2006] J220852.0-010603    | 332.21654479357403 | -1.1010212789856892 | QSO           |  0.35149 |
| 2dFGRS TGS061Z180            |  332.3293752575985 |  -24.12012102380704 | QSO           |     0.32 |
| SDSS J220954.57-012717.6     |  332.4773666618215 |  -1.454892271729591 | QSO           |   3.2958 |
| [VV2006] J221335.7-282542    |  333.3985380422876 |  -28.42824210005132 | QSO           |    2.469 |
| [VV2006] J221532.6-281805    | 333.88574209843875 | -28.301075647502863 | QSO           |     1.33 |
| [VV2006] J221722.5+010436    |  334.3435194955581 |  1.0767543256819685 | QSO           |  1.40302 |
| 2SLAQ J222332.83-010614.8    | 335.88681821013813 |   -1.10412204251795 | QSO           |  2.45971 |
| 2SLAQ J222403.36-005724.2    | 336.01397097341777 | -0.9567096099850134 | QSO           |  0.31339 |
| 2SLAQ J222403.36-005724.2    | 336.01401051604205 | -0.9566969699045356 | QSO           |  0.31339 |
| SDSS J222923.00-020042.7     |  337.3458366571309 |  -2.011785900315515 | QSO           |   3.2941 |
| 2SLAQ J222956.53+003126.5    | 337.48557309949206 |  0.5240235390794395 | QSO           |   1.3403 |
| [VV2006] J223251.7-303250    |  338.2155980841278 |  -30.54711277145381 | QSO           |     0.35 |
| [VV2006] J223633.5+002652    |   339.139729783869 |  0.4480037094611175 | QSO           |  1.35407 |
| SDSS J223649.60+005413.5     | 339.20666171031564 |  0.9038310163367896 | QSO           |   3.3132 |
| PHL   354                    |  339.5968891921001 |  -0.952268013442764 | QSO           |  0.36059 |
| PHL   354                    |  339.5969264365535 | -0.9522370681869864 | QSO           |  0.36059 |
| 2SLAQ J223844.30-005655.3    |  339.6845594683822 |  -0.948694319373839 | QSO           |   1.3575 |
| 2SLAQ J224531.20-004509.4    |  341.3799824113044 | -0.7526108924743485 | QSO           |   1.3679 |
| 2SLAQ J224531.20-004509.4    |  341.3799836615205 | -0.7525947660724432 | QSO           |   1.3679 |
| SDSS J224539.94-002419.7     |  341.4164203070588 | -0.4054482118161328 | QSO           |  3.28047 |
| 2MASS J22495608+0002182      |  342.4836663184702 |  0.0384316128868782 | QSO           |  3.30735 |
| SDSS J225149.74-002811.7     | 342.95730339479854 | -0.4698259059306293 | QSO           |    3.228 |
| [VV2006] J225411.2-312712    | 343.54646400880233 |  -31.45314972730561 | QSO           |     1.36 |
| SDSS J225411.96-004949.5     |  343.5498267824822 | -0.8303920878390473 | QSO           |   3.2973 |
| SDSS J225411.96-004949.5     |  343.5498379046172 | -0.8303498619565828 | QSO           |   3.2973 |
| 2SLAQ J230201.20+003047.2    |  345.5049924642404 |  0.5131468261640252 | QSO           |   1.3443 |
| [VV2006] J230235.5-285630    |  345.6476494287596 | -28.941580257566937 | QSO           |    0.368 |
| 2SLAQ J230316.40-001211.5    |  345.8183544369748 | -0.2031687049072709 | QSO           |   1.5162 |
| SDSS J230428.31+005701.2     |  346.1180884490532 |   0.950341888510796 | QSO           | 0.316817 |
| 2SLAQ J230444.16-010251.7    |  346.1839995707146 |  -1.047637756170335 | QSO           |    1.377 |
| SDSS J230855.49+003705.6     |   347.231188850614 |  0.6182549476788003 | QSO           |  1.78377 |
| [VV2006] J230914.4-305913    |  347.3096188733344 | -30.986794418426523 | QSO           |     1.38 |
| [VV2006] J231135.1-312644    |  347.8963319528839 | -31.445592377850765 | QSO           |     1.35 |
| 2SLAQ J231231.36-011137.5    | 348.13067741527794 | -1.1937043288787734 | QSO           |   1.3596 |
| SDSS J231259.07+010805.6     |  348.2461021601764 |  1.1349593899913708 | QSO           |   3.2954 |
| [VV2006] J231311.9-004538    |   348.299611065616 | -0.7605497687369258 | QSO           |  1.36397 |
| [VV2006] J231519.4-303857    |  348.8308033561476 |  -30.64921915522369 | QSO           |    1.356 |
| [VV2006] J231652.0+005125    |  349.2168428172675 |  0.8571987065141106 | QSO           |  3.22906 |
| [VV2006] J231942.8-302629    | 349.92814830462225 |  -30.44152729995124 | QSO           |    2.473 |
| 2SLAQ J232457.75+002153.2    |  351.2406451424701 |  0.3648363114586009 | QSO           |  0.34462 |
| SDSS J233104.38-004237.2     |   352.768315319454 | -0.7102948577467144 | QSO           |   1.3532 |
| SDSS J233300.21-002030.5     | 353.25093145251367 | -0.3418033383059611 | QSO           |  3.32785 |
| [VV2006] J233438.5+002341    |   353.660612982189 |  0.3949855898346673 | QSO           |  1.38496 |
| 2SLAQ J233522.69-000635.2    |  353.8445277828368 | -0.1097797881436761 | QSO           |   1.3726 |
| [VV2006] J233722.0+002239    |  354.3417350883094 |  0.3775467635964666 | QSO           |  1.37666 |
| [VV2006] J234329.1-300200    |  355.8714951658231 |  -30.03336765255501 | QSO           |    1.358 |
| [VV2006] J235546.2-002342    |  358.9422665997112 | -0.3952102105534735 | QSO           |  3.24518 |
| [VV2006] J235718.4+004350    | 359.32653511559846 |  0.7307049350125405 | QSO           |    4.366 |
| SDSS J235805.25-012153.9     |  359.5218549462989 | -1.3649719892078715 | QSO           | 1.367518 |


**** Redshift
According with [[https://ui.adsabs.harvard.edu/abs/2020A%26A...633A.123G/abstract][Gutiérrez-Soto et al (2021)]] the redshift range where important
emission line of the QSO fall into the J0660 filter are:
+ 1.3 < z < 1.4 -> MgII
+ 2.4 < z < 2.6 -> CIII]
+ 3.2 < z < 3.4 -> CIV 


#+BEGIN_SRC sh
  pip install constants
#+END_SRC

#+RESULTS:
| Collecting   | constants              |                 |                                                                                        |                                           |           |                                                                         |        |        |
| Downloading  | constants-0.6.0.tar.gz | (5.1            | kB)                                                                                    |                                           |           |                                                                         |        |        |
| Building     | wheels                 | for             | collected                                                                              | packages:                                 | constants |                                                                         |        |        |
| Building     | wheel                  | for             | constants                                                                              | (setup.py):                               | started   |                                                                         |        |        |
| Building     | wheel                  | for             | constants                                                                              | (setup.py):                               | finished  | with                                                                    | status | 'done' |
| Created      | wheel                  | for             | constants:                                                                             | filename=constants-0.6.0-py3-none-any.whl | size=5458 | sha256=a711a23bba1fafd7bbb2e4bc83d9b97b11370a83fd5ce9bef79882b9dca9b262 |        |        |
| Stored       | in                     | directory:      | /home/luis/.cache/pip/wheels/77/ac/b2/89268490b92bf6fd0102b3634668042437e0e024c64ef447a1 |                                           |           |                                                                         |        |        |
| Successfully | built                  | constants       |                                                                                        |                                           |           |                                                                         |        |        |
| Installing   | collected              | packages:       | constants                                                                              |                                           |           |                                                                         |        |        |
| Successfully | installed              | constants-0.6.0 |                                                                                        |                                           |           |                                                                         |        |        |

Now we need to do the table latex with the Redshift

* Final list

Merging the old table and the new one:

#+name: merge
#+BEGIN_SRC python :return asciifile :results file
  from astroquery.simbad import Simbad
  import astropy.coordinates as coord
  import astropy.units as u
  from astropy.table import Table, vstack
  from astropy.coordinates import SkyCoord 
  import numpy as np
  from scipy.constants import constants
  
  # Read the tables
  tab1 = Table.read("Final-list/Good-LD-Halpha-DR3_noFlag_merge-takeoutbad-takeoutrepeat-Final.ecsv", format="ascii.ecsv")
  tab2 = Table.read("Final-list/Good-LD-Halpha-DR3_noFlag_merge-takeoutbad-takeoutrepeat-Final-remain-Final.ecsv", format="ascii.ecsv")
  
  # Merging tables 
  table_final = vstack([tab1, tab2])
  
  # save the table resulting
  asciifile = "Final-list/Final-list-emitters-radec.ecsv"
  table_final.write(asciifile, format="ascii.ecsv")  
  
  # pandas
  df_table_final = table_final.to_pandas()
  df_asciifile = "Final-list/Final-list-emitters-radec.csv"
  df_table_final.to_csv(df_asciifile, index = False)
  
  
#+END_SRC

#+RESULTS: merge
[[file:Final-list/Final-list-emitters-radec.ecsv]]

** Simbad matches

- Now we count each class of object. 

#+name: simbad-data-final
#+BEGIN_SRC python :tangle /programs/simbad-data-final.py 
  #from __future__ import print_function
  import numpy as np
  from sklearn import metrics
  import pandas as pd
  from astropy.table import Table
  import seaborn as sns
  import matplotlib.pyplot as plt
  from matplotlib.font_manager import FontProperties
  from sklearn.metrics import mean_squared_error
  from astropy.modeling import models, fitting
  import argparse
  import sys
  import os
  from pathlib import Path
  ROOT_PATH = Path("paper/Figs")
  
  df = pd.read_csv("Final-list/simbad-final.csv")
  print(df.columns)
  
  # MASKs
  m1 = df['main_type'] == 'AGN_Candidate'
  m2 = df['main_type'] == 'AGN'
  m3 = df['main_type'] == 'EmG'
  m4 = df['main_type'] == 'GinGroup'
  m5 = df['main_type'] == 'Galaxy'
  m6 = df['main_type'] == 'Candidate_CV*'
  m7 = df['main_type'] == 'RRLyr'
  m8 = df['main_type'] == 'SN'
  m9 = df['main_type'] == 'HII'
  m11 = df['main_type'] == 'CataclyV*'
  m12 = df['main_type'] == 'FIR'
  m13 = df['main_type'] == 'GinCl'
  m14 = df['main_type'] == 'HII_G'
  m15 = df['main_type'] == 'Seyfert_1'
  m17 = df['main_type'] == 'Star'
  m18 = df['main_type'] == 'PartofG'
  m19 = df['main_type'] == 'RadioG'
  m20 = df['main_type'] == 'IG'
  m21 = df['main_type'] == 'QSO'
  m22 = df['main_type'] == 'EB*'
  m23 = df['main_type'] == 'Radio'
  m24 = df['main_type'] == 'Seyfert_2'
  m26 = df['main_type'] == 'X'
  m27 = df['main_type'] == 'MolCld'
  m28 = df['main_type'] == 'Cl*'
  m29 = df['main_type'] == 'HMXB'
  m30 = df['main_type'] == 'GinPair'
  m31 = df['main_type'] == 'LSB_G'
  m32 = df['main_type'] == 'WD*'
  m33 = df['main_type'] == 'Candidate_RRLyr'
  m34 = df['main_type'] == 'PN'
  m35 = df['main_type'] == 'Blue'
  m36 = df['main_type'] == 'EmObj'
  m37 = df['main_type'] == 'BlueSG*'
  m38 = df['main_type'] == 'StarburstG'
  m39 = df['main_type'] == 'low-mass*'
  m40 = df['main_type'] == 'BlueCompG'
  m41 = df['main_type'] == 'UV'
  m42 = df['main_type'] == 'Candidate_WD*'
  m43 = df['main_type'] == 'MIR'
  m44 = df['main_type'] == 'Radio(cm)'
  m45 = df['main_type'] == 'Candidate_SN*'
  m46 = df['main_type'] == 'QSO_Candidate'
  m47 = df['main_type'] == 'BLLac'
  m48 = df['main_type'] == 'PM*'
  m49 = df['main_type'] == 'Possible_lensImage'
  m51 = df['main_type'] == 'Nova'
  m52 = df['main_type'] == 'BClG'
  m53 = df['main_type'] == 'GlCl'
  m54 = df['main_type'] == 'V*'
  m55 = df['main_type'] == 'Transient'
  m56 = df['main_type'] == 'Unknown'
  m57 = df['main_type'] == 'Candidate_EB*'
  m58 = df['main_type'] == 'Seyfert'
  m59 = df['main_type'] == 'PulsV*'
  
  # Making the tables with individual object classes
  df_agn = pd.concat([df[m1], df[m2], df[m58]])
  df_EmG = pd.concat([df[m3], df[m14], df[m38], df[m40]])
  df_GinGroup = df[m4]
  df_pn = df[m34] 
  df_gal = df[m5]
  df_qso = pd.concat([df[m21], df[m46]])
  df_cv = pd.concat([df[m6], df[m11]])
  df_hii = df[m9]
  df_star = df[m17]
  df_sn = pd.concat([df[m8], df[m45]])
  df_rrly = pd.concat([df[m7], df[m33]])
  df_fir = df[m12]
  df_GinCl = df[m13]
  df_Seyfert_1 = df[m15]
  df_Seyfert_2 = df[m24]
  df_PartofG = df[m18]
  df_RadioG = df[m19]
  df_IG = df[m20]
  df_EB = pd.concat([df[m22], df[m57]])
  df_Radio = pd.concat([df[m23], df[m44]])
  df_X = df[m26]
  df_MolCld = df[m27]
  df_cl = df[m28]
  df_HMXB = df[m29]
  df_GinPair = df[m30]
  df_LSB_G = df[m31]
  df_WD = pd.concat([df[m32], df[m42]])
  df_Blue = df[m35]
  df_EmObj = df[m36]
  df_BlueSG = df[m37]
  df_low_mass = df[m39]
  df_uv = df[m41]
  df_mier = df[m43]
  df_BLLac = df[m47]
  df_pm = df[m48]
  df_Possible_lensImage = df[m49]
  df_nova = df[m51]
  df_bclg = df[m52]
  df_glcl = df[m53]
  df_v = pd.concat([df[m54], df[m59]])
  df_tran = df[m55]
  df_unk = df[m56]
  
  # Countaining the sources of each class 
  list_numbers = ["H II regions", "PN", "CV", "SN", "Nova", "BL Lac",
		  "Variable Star of RR Lyr type",
		  "Star", "WD", "Cluster of Stars", "HMXB", "Far-Infrared source",
		  "Eclipsing binary", "Blue object", "Emission Object", "Blue supergiant star",
		  "Low-mass star", "UV-emission source", "MIER", "Possible lens Image"
		  "Galaxy", "Galaxy in Pair of Galaxies",
		  "Emission line galaxies",
		  "QSO", "AGN", "Part of a Galaxy", "X-ray source", "Molecular Cloud",
		  "Galaxy in Group of Galaxies", "Radio-source", "Interacting Galaxies",
		  "Low Surface Brightness Galaxy", "Radio Galaxy", "Galaxy in Cluster of Galaxies"
		  "High proper-motion Star", "Seyfert 1", "Seyfert 2",
		  "Brightest galaxy in a Cluster", "Globular Cluster", "Variable star", "Transient",
                   "Unknown"]
  
#+END_SRC

#+RESULTS: simbad-data-final
: None

#+BEGIN_SRC python :return filejson_resu :results file :noweb yes :results output
  import json
  <<simbad-data-final>>
  dict_class = {"H II regions": len(df_hii),
		"PN": len(df_pn),
		"CV": len(df_cv),
		"SN": len(df_sn),
		"Nova": len(df_nova),
		"BL Lac": len(df_BLLac),
		"RR Lyr": len(df_rrly),
		"Star": len(df_star),
		"WD": len(df_WD),
		"Cluster of Stars": len(df_cl),
		"HMXB": len(df_HMXB),
		"Far-Infrared source": len(df_fir),
		"Eclipsing binary": len(df_EB),
		"Blue object": len(df_Blue),
		"Emission Object": len(df_EmObj),
		"Blue supergiant star": len(df_BlueSG),
		"Low-mass star": len(df_low_mass),
		"UV-emission source": len(df_uv),
		"MIER": len(df_mier),
		"Possible lens Image": len(df_Possible_lensImage),
		"Galaxy": len(df_gal),
		"Galaxy in Pair of Galaxies": len(df_GinPair),
		"Emission line galaxies": len(df_EmG),
		"QSO": len(df_qso),
		"AGN": len(df_agn),
		"Part of a Galaxy": len(df_PartofG),
		"X-ray source": len(df_X),
		"Molecular Cloud": len(df_MolCld),
		"Galaxy in Group of Galaxies": len(df_GinGroup),
		"Radio-source": len(df_Radio),
		"Interacting Galaxies": len(df_IG),
		"Low Surface Brightness Galaxy": len(df_LSB_G),
		"Radio Galaxy": len(df_RadioG),
		"Galaxy in Cluster of Galaxies": len(df_GinCl),
		"High proper-motion Star": len(df_pm),
		"Seyfert 1": len(df_Seyfert_1),
		"Seyfert 2": len(df_Seyfert_2),
		"Brightest galaxy in a Cluster": len(df_bclg),
		"Globular Cluster": len(df_glcl),
                "Variable star": len(df_v),
                "Transient": len(df_tran),
                "Unknown": len(df_unk)}
  n_total = []
  for key, value in dict_class.items():
      n_total.append(value)
  print("Number total of objects is,", np.sum(n_total))

  filejson_resu = "Final-list/simbad-resuming-final.json"
  with open(filejson_resu, "w") as f:
      json.dump(dict_class, f, indent=2)
  
#+END_SRC

#+RESULTS:
[[file:Index(['Field', 'ID', 'RA', 'DEC', 'FWHM', 'ISOarea', 'KRON_RADIUS', 'MU_MAX',
       'nDet_PStotal', 'PhotoFlagDet', 'u_PStotal', 'J0378_PStotal',
       'J0395_PStotal', 'J0410_PStotal', 'J0430_PStotal', 'g_PStotal',
       'J0515_PStotal', 'r_PStotal', 'J0660_PStotal', 'i_PStotal',
       'J0861_PStotal', 'z_PStotal', 'e_u_PStotal', 'e_J0378_PStotal',
       'e_J0395_PStotal', 'e_J0410_PStotal', 'e_J0430_PStotal', 'e_g_PStotal',
       'e_J0515_PStotal', 'e_r_PStotal', 'e_J0660_PStotal', 'e_i_PStotal',
       'e_J0861_PStotal', 'e_z_PStotal', 'main_id', 'ra_x', 'dec_x',
       'coo_err_maj', 'coo_err_min', 'coo_err_angle', 'nbref', 'ra_sexa',
       'dec_sexa', 'main_type', 'other_types', 'radvel', 'redshift', 'sp_type',
       'morph_type', 'plx', 'pmra', 'pmdec', 'size_maj', 'size_min',
       'size_angle', 'B', 'V', 'R_x', 'J', 'H', 'K', 'u', 'g', 'r_xa', 'i',
       'z', 'angDist'],
      dtype='object')
Number total of objects is, 1042
]]



+ Getting only simbad sources.

#+BEGIN_SRC python :return filename :results file :noweb yes
  <<simbad-data-final>>
  
  # Saving subtables (QSO)
  filename = "Final-list/QSO-simbad-final.csv"
  df_qso.to_csv(filename, index = False)

  # Saving subtables (CV)
  filename = "Final-list/CV-simbad-final.csv"
  df_cv.to_csv(filename, index = False)
  
#+END_SRC

#+RESULTS:
[[file:Final-list/CV-simbad-final.csv]]


+ Making a plot with the red-shift distribution for the galaxies:

#+BEGIN_SRC python :results output :results file :noweb yes 
   <<simbad-data-final>>  
   df_galaxies = pd.concat([df[m1], df[m2], df[m3], df[m4], df[m5], df[m13], df[m14], 
                 df[m15], df[m18], df[m19], df[m20], df[m24], df[m31], df[m38], 
                       df[m40], df[m47], df[m52], df[m58]]) 
   
   z = df_galaxies["redshift"] 
   
   m_z = z <= 0.02
   h_z = z > 0.02
   low_z_g = df_galaxies[m_z]
   high_z_g = df_galaxies[h_z]
   print("Number of galaxies:", len(df_galaxies))
   print("Number of galaxis z < 0.02:", len(low_z_g))
   print("Number of galaxis z > 0.02:", len(high_z_g))

   pltfile = 'paper/Figs/dist-redshift-galaxies.pdf'
   with sns.axes_style("ticks"):
       # Bar diagram
       fig, ax1 = plt.subplots(1, 1, figsize=(10, 6), sharex=True)
       plt.xlabel(r"Redshift, $z$", fontsize=33)
       plt.ylabel(r"# of sources", fontsize=33)
       plt.tick_params(axis='x', labelsize=33) 
       plt.tick_params(axis='y', labelsize=33)
       z = [x for x in z]
       sns.distplot(z,norm_hist=False, kde=False, ax=ax1,
                 bins=100, color='g', kde_kws={"shade": True})
       ax1.axvline(x=0.02, c = "k", ls='-') #colors='k')#, linestyles='-', label='g', data=None)
        
       bbox_props = dict(boxstyle="round", fc="w", ec="0.9", alpha=0.9, pad=0.5)
       ax1.annotate(r"$z = 0.02$", xy=(0.08, 1.5), alpha=0.9, size=16.0,
                   xytext=(0.1, 200), textcoords='offset points', ha='right', va='bottom', 
                                                      bbox=bbox_props, zorder=100)
       ax1.axvline(x=0.306, c = "k", ls='--')
       ax1.annotate(r"$z = 0.306$", xy=(0.32, 1.5), alpha=0.9, size=16.0,
                   xytext=(0.1, 200), textcoords='offset points', ha='right', va='bottom', 
                                                      bbox=bbox_props, zorder=100)
       ax1.axvline(x=0.376, c = "k", ls=':') 
       ax1.annotate(r"$z = 0.376$", xy=(0.42, 1.5), alpha=0.9, size=16.0,
                   xytext=(0.1, 200), textcoords='offset points', ha='right', va='bottom', 
                                                      bbox=bbox_props, zorder=100)

       ax1.fill(0.306, 0.376)
       ax1.axvspan(0.306, 0.376, alpha=0.06, color='k')
       ax1.set(xlim=[-0.05, 0.45])
       #ax.legend(loc='upper left')
       ymax = ax1.get_ybound()[1]
       sns.despine()
       plt.tight_layout()
       plt.savefig(pltfile)
  
#+END_SRC

*** Ploting the (r - z) vs (g - r) diagram 

#+BEGIN_SRC python :results output :results file :noweb yes 
   <<simbad-data-final>>

   AGN = pd.concat([df[m1], df[m2], df[m15], df[m24], df[m19], df[m47]])
   gal = pd.concat([df[m14], df[m3], df[m40], df[m38], df[m20]])
   seyfert = pd.concat([df[m15], df[m24], df[m58]])
   
   
   pltfile = 'paper/Figs/diagram-ri-rj660-simbad.jpg'
   with sns.axes_style("ticks"):
       # Bar diagram
       fig, ax1 = plt.subplots(1, 1, figsize=(7, 6), sharex=True)
       plt.xlabel(r"$r - i$", fontsize=25)
       plt.ylabel(r"$r - J0660$", fontsize=25)
       plt.tick_params(axis='x', labelsize=25) 
       plt.tick_params(axis='y', labelsize=25)
      
       ax1.scatter(df_cv["r_PStotal"] - df_cv["i_PStotal"],  df_cv["r_PStotal"] - df_cv["J0660_PStotal"], c = "red", edgecolor=['black'], s = 40, zorder=5, label="CV")
       ax1.scatter(AGN["r_PStotal"] - AGN["i_PStotal"], AGN["r_PStotal"] - AGN["J0660_PStotal"],  c = "blue", edgecolor=['black'], alpha = 0.9, s = 40, label = "AGN")
       ax1.scatter(df_hii["r_PStotal"] - df_hii["i_PStotal"], df_hii["r_PStotal"] - df_hii["J0660_PStotal"],  c = "yellow", edgecolor=['black'], alpha = 0.9, s = 40, zorder= 6, label = "HII regions")
       ax1.scatter(df_pn["r_PStotal"] - df_pn["i_PStotal"], df_pn["r_PStotal"] - df_pn["J0660_PStotal"],  c = "green", edgecolor=['black'], alpha = 0.9, s = 40, label = "PN")
       ax1.scatter(df_qso["r_PStotal"] - df_qso["i_PStotal"], df_qso["r_PStotal"] - df_qso["J0660_PStotal"],  c = "pink", edgecolor=['black'], alpha = 0.9, s = 40, label = "QSO")
       ax1.scatter(gal["r_PStotal"] - gal["i_PStotal"], gal["r_PStotal"] - gal["J0660_PStotal"],  c = "purple", edgecolor=['black'], alpha = 0.9, s = 40, zorder=4, label = "EMG")
       ax1.scatter(df_sn["r_PStotal"] - df_sn["i_PStotal"], df_sn["r_PStotal"] - df_sn["J0660_PStotal"],  c = "brown", edgecolor=['black'], alpha = 0.9, s = 40, zorder=4, label = "Seyfert")
       ax1.set(xlim=[-3., 3.5])
       ax1.set(ylim=[-1.0, 3.0])
       ax1.legend(loc='upper left')
       #ymax = ax1.get_ybound()[1]
       sns.despine()
       plt.tight_layout()
       plt.savefig(pltfile)

#+END_SRC

#+RESULTS:
[[file:Index(['Field', 'ID', 'RA', 'DEC', 'FWHM', 'ISOarea', 'KRON_RADIUS', 'MU_MAX',
       'nDet_PStotal', 'PhotoFlagDet', 'u_PStotal', 'J0378_PStotal',
       'J0395_PStotal', 'J0410_PStotal', 'J0430_PStotal', 'g_PStotal',
       'J0515_PStotal', 'r_PStotal', 'J0660_PStotal', 'i_PStotal',
       'J0861_PStotal', 'z_PStotal', 'e_u_PStotal', 'e_J0378_PStotal',
       'e_J0395_PStotal', 'e_J0410_PStotal', 'e_J0430_PStotal', 'e_g_PStotal',
       'e_J0515_PStotal', 'e_r_PStotal', 'e_J0660_PStotal', 'e_i_PStotal',
       'e_J0861_PStotal', 'e_z_PStotal', 'main_id', 'ra_x', 'dec_x',
       'coo_err_maj', 'coo_err_min', 'coo_err_angle', 'nbref', 'ra_sexa',
       'dec_sexa', 'main_type', 'other_types', 'radvel', 'redshift', 'sp_type',
       'morph_type', 'plx', 'pmra', 'pmdec', 'size_maj', 'size_min',
       'size_angle', 'B', 'V', 'R_x', 'J', 'H', 'K', 'u', 'g', 'r_xa', 'i',
       'z', 'angDist'],
      dtype='object')
]]
[[file:Index(['Field', 'ID', 'RA', 'DEC', 'FWHM', 'ISOarea', 'KRON_RADIUS', 'MU_MAX',
       'nDet_PStotal', 'PhotoFlagDet', 'u_PStotal', 'J0378_PStotal',
       'J0395_PStotal', 'J0410_PStotal', 'J0430_PStotal', 'g_PStotal',
       'J0515_PStotal', 'r_PStotal', 'J0660_PStotal', 'i_PStotal',
       'J0861_PStotal', 'z_PStotal', 'e_u_PStotal', 'e_J0378_PStotal',
       'e_J0395_PStotal', 'e_J0410_PStotal', 'e_J0430_PStotal', 'e_g_PStotal',
       'e_J0515_PStotal', 'e_r_PStotal', 'e_J0660_PStotal', 'e_i_PStotal',
       'e_J0861_PStotal', 'e_z_PStotal', 'main_id', 'ra_x', 'dec_x',
       'coo_err_maj', 'coo_err_min', 'coo_err_angle', 'nbref', 'ra_sexa',
       'dec_sexa', 'main_type', 'other_types', 'radvel', 'redshift', 'sp_type',
       'morph_type', 'plx', 'pmra', 'pmdec', 'size_maj', 'size_min',
       'size_angle', 'B', 'V', 'R_x', 'J', 'H', 'K', 'u', 'g', 'r_xa', 'i',
       'z', 'angDist'],
      dtype='object')
]]
[[file:Index(['Field', 'ID', 'RA', 'DEC', 'FWHM', 'ISOarea', 'KRON_RADIUS', 'MU_MAX',
       'nDet_PStotal', 'PhotoFlagDet', 'u_PStotal', 'J0378_PStotal',
       'J0395_PStotal', 'J0410_PStotal', 'J0430_PStotal', 'g_PStotal',
       'J0515_PStotal', 'r_PStotal', 'J0660_PStotal', 'i_PStotal',
       'J0861_PStotal', 'z_PStotal', 'e_u_PStotal', 'e_J0378_PStotal',
       'e_J0395_PStotal', 'e_J0410_PStotal', 'e_J0430_PStotal', 'e_g_PStotal',
       'e_J0515_PStotal', 'e_r_PStotal', 'e_J0660_PStotal', 'e_i_PStotal',
       'e_J0861_PStotal', 'e_z_PStotal', 'main_id', 'ra_x', 'dec_x',
       'coo_err_maj', 'coo_err_min', 'coo_err_angle', 'nbref', 'ra_sexa',
       'dec_sexa', 'main_type', 'other_types', 'radvel', 'redshift', 'sp_type',
       'morph_type', 'plx', 'pmra', 'pmdec', 'size_maj', 'size_min',
       'size_angle', 'B', 'V', 'R_x', 'J', 'H', 'K', 'u', 'g', 'r_xa', 'i',
       'z', 'angDist'],
      dtype='object')
]]
[[file:Index(['Field', 'ID', 'RA', 'DEC', 'FWHM', 'ISOarea', 'KRON_RADIUS', 'MU_MAX',
       'nDet_PStotal', 'PhotoFlagDet', 'u_PStotal', 'J0378_PStotal',
       'J0395_PStotal', 'J0410_PStotal', 'J0430_PStotal', 'g_PStotal',
       'J0515_PStotal', 'r_PStotal', 'J0660_PStotal', 'i_PStotal',
       'J0861_PStotal', 'z_PStotal', 'e_u_PStotal', 'e_J0378_PStotal',
       'e_J0395_PStotal', 'e_J0410_PStotal', 'e_J0430_PStotal', 'e_g_PStotal',
       'e_J0515_PStotal', 'e_r_PStotal', 'e_J0660_PStotal', 'e_i_PStotal',
       'e_J0861_PStotal', 'e_z_PStotal', 'main_id', 'ra_x', 'dec_x',
       'coo_err_maj', 'coo_err_min', 'coo_err_angle', 'nbref', 'ra_sexa',
       'dec_sexa', 'main_type', 'other_types', 'radvel', 'redshift', 'sp_type',
       'morph_type', 'plx', 'pmra', 'pmdec', 'size_maj', 'size_min',
       'size_angle', 'B', 'V', 'R_x', 'J', 'H', 'K', 'u', 'g', 'r_xa', 'i',
       'z', 'angDist'],
      dtype='object')
]]




** Getting more parameters

I need the final  table with more parameters, especially, with magnitudes.
- Running the splus python package to make match.

: python programs/match-splus-database.py

I don't understand why I have repeat objects, I mean with the same ID.
Eliminate duplicate  objects.

#+BEGIN_SRC python :return newtabfile_ :results file :noweb yes 
import pandas as pd
from astropy.table import Table, vstack
import numpy as np
from pathlib import Path

ROOT = Path("Final-list/") 

tab = Table.read(ROOT/ "Final-list-emitters-allparam.ecsv", format="ascii.ecsv")

# Eliminate duplicates
sources, idu = [], []
for i, source in  enumerate(tab['ID']):
    if source in sources:
        idu.append(i)
    sources.append(source)
if idu:
    tab.remove_rows(idu)

newtabfile_ = "Final-list-emitters-allparam-unique.ecsv"
tab.write(ROOT / newtabfile_, format="ascii.ecsv")

# pandas
df_tab = tab.to_pandas()
df_newtabfile_ = "Final-list-emitters-allparam-unique.csv"
df_tab.to_csv(ROOT / df_newtabfile_, index = False)

#+END_SRC

#+RESULTS:
[[file:Final-list-emitters-allparam-unique.ecsv]]


** GAIA
:PROPERTIES:
:header-args: :noweb yes :dir Final-list
:END:

I made croasstch mached with EDR GAIA. All in  [[file:Final-list]].

#+name: read-gaia-table
#+BEGIN_SRC python
  df = pd.read_csv("Gaia-Final-list-emitters-allparam-unique.csv")
#+END_SRC

#+name: qso-read-gaia-table
#+BEGIN_SRC python
  df_qso = pd.read_csv("GAIA-QSO-simbad-final.csv")
#+END_SRC

#+name: cv-read-gaia-table
#+BEGIN_SRC python
  df_cv = pd.read_csv("GAIA-CV-simbad-final.csv")
#+END_SRC

#+name: gaia-match
#+BEGIN_SRC python :results output
  import numpy as np
  import json
  import matplotlib.pyplot as plt
  from  astropy.table import Table
  import pandas as pd
  import seaborn as sns
  from scipy.stats import gaussian_kde

  <<read-gaia-table>>
  <<qso-read-gaia-table>>
  <<cv-read-gaia-table>>

  lgd_kws = {'frameon': True, 'fancybox': True, 'shadow': True}

  # removing inf or nan values
  col = ["phot_g_mean_mag", "bp_rp"] 
  df_new = df[col] 
  df_new1 =  df_new.dropna()

  # G-mag
  Gmag = np.array(df_new1["phot_g_mean_mag"]) 
  
  # Color
  #cbp_rpmag = df["phot_bp_mean_mag"] - df["phot_rp_mean_mag"]
  bp_rpmag = np.array(df_new1["bp_rp"])

  # Calculate the point density
  xy = np.vstack([bp_rpmag, Gmag])
  z = gaussian_kde(xy)(xy)

  # Sort the points by density, so that the densest points are plotted last
  idx = z.argsort()
  x, y, z = bp_rpmag[idx], Gmag[idx], z[idx]
  
  # QSO
  Gmag_qso = df_qso["phot_g_mean_mag"]
  bp_rpmag_qso = df_qso["bp_rp"]
  colors = ["cerulean",]
  colors = sns.xkcd_palette(colors)

  # CV
  Gmag_cv = df_cv["phot_g_mean_mag"]
  bp_rpmag_cv = df_cv["bp_rp"]
  colors1 = ["pale yellow"]
  colors1 = sns.xkcd_palette(colors1)
  
#+END_SRC

#+RESULTS: gaia-match


#+BEGIN_SRC python :return pltfile :results file 
  
  <<gaia-match>>
  
  pltfile = 'color-mag-gaia.pdf'
  pltfile = 'color-mag-gaia.jpg'
  sns.set_style('ticks')
  fig = plt.figure(figsize=(6, 7))
  ax = fig.add_subplot(111)
  
  ax.scatter(x, y, c=z, s=50, edgecolor=['none'])
  ax.scatter(bp_rpmag_qso, Gmag_qso, c = colors, edgecolor=['black'], alpha = 0.4, s = 50)
  ax.scatter(bp_rpmag_cv, Gmag_cv, c = colors1, edgecolor=['black'], alpha = 0.9, s = 50)
  #plt.scatter(bp_rpmag, Gmag, alpha=0.8)
  plt.xlabel(r'$G_{BP} - G_{RP}$')
  plt.ylabel(r'$G$')
  #ax.set_xlim(-30.0, 390.0)
  #ax.set_ylim(-90.0, 90.0)
  ax.legend(prop={'family': 'monospace', 'size': 'x-small'}, **lgd_kws)
  plt.gca().invert_yaxis()
  fig.savefig(pltfile)     
  
#+END_SRC

#+RESULTS:
[[file:Final-list/color-mag-gaia.jpg]]


#+BEGIN_SRC python :return pltfile :results file :results output
  
  <<gaia-match>>
  
  # Absolute magnitude

  # removing inf or nan values
  col = ["parallax", "phot_g_mean_mag", "bp_rp"] 
  df_new = df[col] 
  df_new1 =  df_new.dropna()

  # G-mag
  Gmag_abs = np.array(df_new1["phot_g_mean_mag"]) + 5*np.log10(np.array(df_new1["parallax"] / 1000.)) + 5
  
  # Color
  bp_rpmag = np.array(df_new1["bp_rp"])  

  # Creating new pandas table
  data = {'G_abs':Gmag_abs,
          'bp_rp':bp_rpmag}
  df_result = pd.DataFrame(data)
  
  df_result_new = df_result.dropna()
  
  G_abs = np.array(df_result_new["G_abs"])
  bp_rp = np.array(df_result_new["bp_rp"])
  # Calculate the point density
  xy = np.vstack([bp_rp, G_abs])
  z = gaussian_kde(xy)(xy)

  # Sort the points by density, so that the densest points are plotted last
  idx = z.argsort()
  x, y, z = bp_rp[idx], G_abs[idx], z[idx]

  # QSO
  Gmag_qso_abs = df_qso["phot_g_mean_mag"] + 5*np.log10(np.array(df_qso["parallax"] / 1000.)) + 5
  bp_rpmag_qso = df_qso["bp_rp"]
  colors = ["cerulean",]
  colors = sns.xkcd_palette(colors)

  # CV
  Gmag_cv_abs = df_cv["phot_g_mean_mag"] + 5*np.log10(np.array(df_cv["parallax"] / 1000.)) + 5
  bp_rpmag_cv = df_cv["bp_rp"]
  colors1 = ["pale yellow",]
  colors1 = sns.xkcd_palette(colors1)

  pltfile = 'color-mag_abs-gaia.pdf'
  sns.set_style('ticks')
  fig = plt.figure(figsize=(6, 7))
  ax = fig.add_subplot(111)
  
  ax.scatter(x, y, c=z, s=50, edgecolor=['none'])
  ax.scatter(bp_rpmag_qso, Gmag_qso_abs, c = colors, edgecolor=['black'], alpha = 0.4, s = 50)
  ax.scatter(bp_rpmag_cv, Gmag_cv_abs, c = colors1, edgecolor=['black'], alpha = 0.9, s = 50)
  #plt.scatter(bp_rpmag, Gmag_abs, alpha=0.8)
  plt.xlabel(r'$G_{BP} - G_{RP}$')
  plt.ylabel(r'$M_G + A_G$')
  #ax.set_xlim(-30.0, 390.0)
  #ax.set_ylim(-90.0, 90.0)
  ax.legend(prop={'family': 'monospace', 'size': 'x-small'}, **lgd_kws)
  plt.gca().invert_yaxis()
  fig.savefig(pltfile)     
  
#+END_SRC

#+RESULTS:
[[file:Final-list]]

#+BEGIN_SRC python :return pltfile :results file :results output
  
  <<gaia-match>>
  
  # removing inf or nan values
  col = ["parallax"] 
  df_new = df[col] 
  df_new1 =  df_new.dropna()

  d = 1 / df_new1["parallax"] 

  # QSOs from simbad
  df_qso_new = df_qso[col] 
  df_qso_new1 =  df_qso_new.dropna()

  d_qso = 1 / df_qso_new1["parallax"] 

  pltfile = 'dist-distance-gaia.pdf'
  with sns.axes_style("ticks"):
    # Bar diagram
    fig, ax1 = plt.subplots(1, 1, figsize=(10, 6), sharex=True)
    plt.xlabel(r"$D(Kpc)$", fontsize=33)
    plt.ylabel(r"Density", fontsize=33)
    plt.tick_params(axis='x', labelsize=33) 
    plt.tick_params(axis='y', labelsize=33)
    d = [x for x in d]
    sns.distplot(d,norm_hist=True, kde=False, ax=ax1,
                 bins=2000, color='r')
    d_qso = [x for x in d_qso]
    sns.distplot(d_qso, norm_hist=True, kde=False, ax=ax1,
                 bins=2000, color='b')
                
    ax1.set(xlim=[-50, 70])
    #ax.legend(loc='upper left')
    ymax = ax1.get_ybound()[1]
    sns.despine()
    plt.tight_layout()
    plt.savefig(pltfile)
  
#+END_SRC

#+RESULTS:
[[file:Final-list]]

*** GAIA distance from Bailer-Jones et al. 2021
    I used  =rgeo= =[pc]=, Median of the geometric distance posterior, in Vizier is =I/352/gedr3dis=.
    But I discovered that =rpgeo= =[pc]=, median photogeotric distance is better.

#+name: read-gaia-distance-table
#+BEGIN_SRC python
  df_dis = pd.read_csv("Gaia-distance-Final-list-emitters-allparam-unique.csv")
#+END_SRC

#+name: qso-read-gaia-distance-table
#+BEGIN_SRC python
  df_qso_dis = pd.read_csv("GAIA-QSO-distance-simbad-final.csv")
#+END_SRC

#+name: cv-read-gaia-distance-table
#+BEGIN_SRC python
  df_cv_dis = pd.read_csv("GAIA-CV-distance-simbad-final-all.csv")
#+END_SRC

+ Number of known QSO with < 4.0 kpc.

#+BEGIN_SRC python :results output
  import pandas as pd
  import numpy as np
  <<qso-read-gaia-distance-table>>
  <<qso-read-gaia-table>>
  d_qso = np.array(df_qso_dis["rpgeo"]) / 1000.
  d_qso_para = 1 / df_qso["parallax"] 

  mask1 = d_qso < 4.0
  mask2 = (d_qso_para >= 0.0) & (d_qso_para <= 4.0)

  d_baler_4 = d_qso[mask1]
  d_para_4 = d_qso_para[mask2]
  df_qso_dis = df_qso_dis[mask1]
   
  print("Number with QSO dist Bailer:", len(d_qso))
  print("Number of QSO dist Bailer < 4:", len(d_baler_4))
  print("QSO dist para < 4:", df_qso_dis)
  print("Number of QSO dist para < 4:", len(d_para_4))
#+END_SRC

#+RESULTS:
#+begin_example
Number with QSO dist Bailer: 195
Number of QSO dist Bailer < 4: 51
QSO dist para < 4:            Field_1                       ID_1  ...  angDist_x  Separation
2    STRIPE82-0059  iDR3.STRIPE82-0059.038992  ...   0.566643    0.065479
18   STRIPE82-0026  iDR3.STRIPE82-0026.037373  ...   0.113735    0.001844
34   STRIPE82-0148  iDR3.STRIPE82-0148.001139  ...   0.232503    0.007212
42    SPLUS-s24s63   iDR3.SPLUS-s24s63.042079  ...   0.125154    0.002383
44    SPLUS-s25s10   iDR3.SPLUS-s25s10.029368  ...   0.201177    0.000794
46    SPLUS-n01s23   iDR3.SPLUS-n01s23.038457  ...   0.233618    0.001082
47    SPLUS-n02n22   iDR3.SPLUS-n02n22.059209  ...   0.142526    0.008874
52   STRIPE82-0007  iDR3.STRIPE82-0007.021121  ...   0.181081    0.013351
57   STRIPE82-0020  iDR3.STRIPE82-0020.053566  ...   0.214332    0.007772
58   STRIPE82-0025  iDR3.STRIPE82-0025.031694  ...   0.100877    0.002831
66   STRIPE82-0068  iDR3.STRIPE82-0068.006406  ...   0.060903    0.007206
67   STRIPE82-0069  iDR3.STRIPE82-0069.058305  ...   0.086811    0.013725
69   STRIPE82-0088  iDR3.STRIPE82-0088.084531  ...   0.184650    0.152283
70   STRIPE82-0106  iDR3.STRIPE82-0106.052252  ...   0.170349    0.008704
74   STRIPE82-0143  iDR3.STRIPE82-0143.016256  ...   0.151043    0.004418
76   STRIPE82-0152  iDR3.STRIPE82-0152.022237  ...   0.184347    0.009439
84    SPLUS-s23s47   iDR3.SPLUS-s23s47.008417  ...   0.168306    0.004188
99   STRIPE82-0018  iDR3.STRIPE82-0018.064634  ...   0.184620    0.008528
100  STRIPE82-0020  iDR3.STRIPE82-0020.062391  ...   0.510505    0.002964
104  STRIPE82-0028  iDR3.STRIPE82-0028.012953  ...   0.168322    0.013831
105  STRIPE82-0029  iDR3.STRIPE82-0029.026431  ...   0.157528    0.000837
106  STRIPE82-0032  iDR3.STRIPE82-0032.003058  ...   0.426510    0.007891
110  STRIPE82-0042  iDR3.STRIPE82-0042.016294  ...   0.126869    0.010938
111  STRIPE82-0044  iDR3.STRIPE82-0044.002332  ...   0.153183    0.007341
117  STRIPE82-0062  iDR3.STRIPE82-0062.010390  ...   0.191612    0.014489
122  STRIPE82-0081  iDR3.STRIPE82-0081.034915  ...   0.117840    0.002038
123  STRIPE82-0081  iDR3.STRIPE82-0081.053377  ...   0.169321    0.008718
130  STRIPE82-0151  iDR3.STRIPE82-0151.013776  ...   0.189094    0.006743
140   SPLUS-s23s20   iDR3.SPLUS-s23s20.028661  ...   0.321053    0.027919
142   SPLUS-s24s10   iDR3.SPLUS-s24s10.009259  ...   0.193704    0.013043
143   SPLUS-s24s10   iDR3.SPLUS-s24s10.013024  ...   0.205006    0.010667
147   SPLUS-s24s70   iDR3.SPLUS-s24s70.037609  ...   0.200823    0.012105
156   SPLUS-n02n27   iDR3.SPLUS-n02n27.026395  ...   0.231241    0.007546
157   SPLUS-n02s21   iDR3.SPLUS-n02s21.038093  ...   0.293812    0.043273
158   SPLUS-n03s21   iDR3.SPLUS-n03s21.031094  ...   0.195212    0.008589
161  STRIPE82-0002  iDR3.STRIPE82-0002.030464  ...   0.139954    0.003905
164  STRIPE82-0017  iDR3.STRIPE82-0017.024243  ...   0.255920    0.003983
165  STRIPE82-0026  iDR3.STRIPE82-0026.006093  ...   0.162860    0.004288
167  STRIPE82-0035  iDR3.STRIPE82-0035.022844  ...   0.144779    0.012272
171   SPLUS-n03s23   iDR3.SPLUS-n03s23.033092  ...   0.177323    0.041208
173  STRIPE82-0008  iDR3.STRIPE82-0008.034263  ...   0.150893    0.044824
176  STRIPE82-0058  iDR3.STRIPE82-0058.035027  ...   0.196080    0.067941
177  STRIPE82-0142  iDR3.STRIPE82-0142.034401  ...   0.245332    0.026299
179   SPLUS-s23s20   iDR3.SPLUS-s23s20.009264  ...   0.115496    0.000992
180   SPLUS-n02n27   iDR3.SPLUS-n02n27.022071  ...   0.073249    0.019058
181   SPLUS-n02s19   iDR3.SPLUS-n02s19.000577  ...   0.267068    0.025793
183  STRIPE82-0004  iDR3.STRIPE82-0004.031191  ...   0.238220    0.009249
184  STRIPE82-0104  iDR3.STRIPE82-0104.027921  ...   0.102429    0.002602
190   SPLUS-s19s33   iDR3.SPLUS-s19s33.032618  ...   0.236020    0.005759
191  STRIPE82-0053  iDR3.STRIPE82-0053.044359  ...   0.231527    0.004083
192   SPLUS-s21s10   iDR3.SPLUS-s21s10.048904  ...   0.179287    0.010906

[51 rows x 172 columns]
Number of QSO dist para < 4: 52
#+end_example

#+name: gaia-match-distance
#+BEGIN_SRC python :results output
  import numpy as np
  import json
  import matplotlib.pyplot as plt
  from  astropy.table import Table
  import pandas as pd
  import seaborn as sns
  from scipy.stats import gaussian_kde
  
  <<read-gaia-distance-table>>
  <<qso-read-gaia-distance-table>>
  <<cv-read-gaia-distance-table>>
  
  lgd_kws = {'frameon': True, 'fancybox': True, 'shadow': True}
  
  # removing inf or nan values
  col = ["phot_g_mean_mag", "bp_rp"] 
  df_new = df_dis[col] 
  df_new1 =  df_new.dropna()
  
  # G-mag
  Gmag = np.array(df_new1["phot_g_mean_mag"]) 
  
  # Color
  #cbp_rpmag = df["phot_bp_mean_mag"] - df["phot_rp_mean_mag"]
  bp_rpmag = np.array(df_new1["bp_rp"])
  
  # Calculate the point density
  xy = np.vstack([bp_rpmag, Gmag])
  z = gaussian_kde(xy)(xy)
  
  # Sort the points by density, so that the densest points are plotted last
  idx = z.argsort()
  x, y, z = bp_rpmag[idx], Gmag[idx], z[idx]
  
  # QSO
  Gmag_qso = df_qso_dis["phot_g_mean_mag"]
  bp_rpmag_qso = df_qso_dis["bp_rp"]
  colors = ["cerulean",]
  colors = sns.xkcd_palette(colors)
  
#+END_SRC


#+BEGIN_SRC python :return pltfile :results file :results output
  
  <<gaia-match-distance>>
  
  # Absolute magnitude

  # removing inf or nan values
  col = ["rpgeo", "phot_g_mean_mag", "bp_rp"] 
  df_new = df_dis[col] 
  df_new1 =  df_new.dropna()

  # G-mag
  Gmag_abs = np.array(df_new1["phot_g_mean_mag"]) - 5*np.log10(np.array(df_new1["rpgeo"])) + 5
  
  # Color
  bp_rpmag = np.array(df_new1["bp_rp"])  

  # Creating new pandas table
  data = {'G_abs':Gmag_abs,
          'bp_rp':bp_rpmag}
  df_result = pd.DataFrame(data)
  
  df_result_new = df_result.dropna()
  
  G_abs = np.array(df_result_new["G_abs"])
  bp_rp = np.array(df_result_new["bp_rp"])
  # Calculate the point density
  xy = np.vstack([bp_rp, G_abs])
  z = gaussian_kde(xy)(xy)

  # Sort the points by density, so that the densest points are plotted last
  idx = z.argsort()
  x, y, z = bp_rp[idx], G_abs[idx], z[idx]

  # QSO
  Gmag_qso_abs = df_qso_dis["phot_g_mean_mag"] - 5*np.log10(np.array(df_qso_dis["rpgeo"])) + 5
  bp_rpmag_qso =  df_qso_dis["bp_rp"]
  colors = ["cerulean",]
  colors = sns.xkcd_palette(colors)

  pltfile = 'color-mag_abs-gaia-distance.jpg'
  sns.set_style('ticks')
  fig = plt.figure(figsize=(6, 7))
  ax = fig.add_subplot(111)
  
  ax.scatter(x, y, c=z, s=50, edgecolor=['none'])
  ax.scatter(bp_rpmag_qso, Gmag_qso_abs, c = colors, edgecolor=['black'], alpha = 0.4, s = 50)
  #ax.scatter(bp_rpmag_cv, Gmag_cv_abs, c = colors1, edgecolor=['black'], alpha = 0.9, s = 50)
  #plt.scatter(bp_rpmag, Gmag_abs, alpha=0.8)
  plt.xlabel(r'$G_{BP} - G_{RP}$')
  plt.ylabel(r'$M_G + A_G$')
  #ax.set_xlim(-30.0, 390.0)
  #ax.set_ylim(-90.0, 90.0)
  ax.legend(prop={'family': 'monospace', 'size': 'x-small'}, **lgd_kws)
  plt.gca().invert_yaxis()
  fig.savefig(pltfile)     
  
#+END_SRC

#+RESULTS:
[[file:Final-list]]

#+BEGIN_SRC python :return pltfile :results file :results output
  
  <<gaia-match-distance>>
  
  # Absolute magnitude

  # removing inf or nan values
  col = ["rpgeo", "phot_g_mean_mag", "phot_bp_mean_mag", "phot_rp_mean_mag", "bp_rp"] 
  df_new = df_dis[col] 
  df_new1 =  df_new.dropna()

  # G-mag
  Gmag_abs = np.array(df_new1["phot_g_mean_mag"]) - 5*np.log10(np.array(df_new1["rpgeo"])) + 5
  
  # Color
  bp_rpmag = np.array(df_new1["bp_rp"])  

  # Creating new pandas table
  data = {'G_abs':Gmag_abs,
          'bp_rp':bp_rpmag}
  df_result = pd.DataFrame(data)
  
  df_result_new = df_result.dropna()
  
  G_abs = np.array(df_result_new["G_abs"])
  bp_rp = np.array(df_result_new["bp_rp"])
  # Calculate the point density
  xy = np.vstack([bp_rp, G_abs])
  z = gaussian_kde(xy)(xy)

  # Sort the points by density, so that the densest points are plotted last
  idx = z.argsort()
  x, y, z = bp_rp[idx], G_abs[idx], z[idx]

  # QSO
  d_qso = np.array(df_qso_dis["rpgeo"]) / 1000.

  mask1 = d_qso <= 4.0
  mask2 = d_qso > 4.0
    
  # < 4 kpc
  Gmag_qso_abs1 = df_qso_dis["phot_g_mean_mag"][mask1] - 5*np.log10(np.array(df_qso_dis["rpgeo"][mask1])) + 5
  bp_rpmag_qso1 =  df_qso_dis["bp_rp"][mask1]
  colors1 = ["cerulean",]
  colors1 = sns.xkcd_palette(colors1)
  
  # > 4 kpc
  Gmag_qso_abs2 = df_qso_dis["phot_g_mean_mag"][mask2] - 5*np.log10(np.array(df_qso_dis["rpgeo"][mask2])) + 5
  bp_rpmag_qso2 =  df_qso_dis["bp_rp"][mask2]
  colors2 = ["light purple",]
  colors2 = sns.xkcd_palette(colors2) 

  # CV
  Gmag_cv_abs = df_cv_dis["phot_g_mean_mag"] - 5*np.log10(np.array(df_cv_dis["rpgeo"])) + 5
  bp_rpmag_cv =  df_cv_dis["bp_rp"]
  colors3 = ["pale yellow",]
  colors3 = sns.xkcd_palette(colors3) 
    
  pltfile = 'color-mag_abs-gaia-distance-cut.jpg'
  sns.set_style('ticks')
  fig = plt.figure(figsize=(6, 7))
  ax = fig.add_subplot(111)
  
  ax.scatter(x, y, c=z, s=40, edgecolor=['none'])
  ax.scatter(bp_rpmag_qso1, Gmag_qso_abs1, c = colors1, edgecolor=['black'], alpha = 0.7, s = 50, zorder=3, label = r"QSOs (D $\leq$ 4 kpc)")
  ax.scatter(bp_rpmag_qso2, Gmag_qso_abs2, c = colors2, edgecolor=['black'], alpha = 0.7, s = 50, label = "QSOs (D > 4 kpc)")
  ax.scatter(bp_rpmag_cv, Gmag_cv_abs, c = colors3, edgecolor=['black'], alpha = 0.8, s = 50, zorder=4, label = "CV")
  #ax.scatter(bp_rpmag_cv, Gmag_cv_abs, c = colors1, edgecolor=['black'], alpha = 0.9, s = 50)
  #plt.scatter(bp_rpmag, Gmag_abs, alpha=0.8)
  plt.xlabel(r'$G_{BP} - G_{RP}$')
  plt.ylabel(r'$M_G + A_G$')
  #ax.set_xlim(-30.0, 390.0)
  #ax.set_ylim(-90.0, 90.0)
  ax.legend(prop={'family': 'monospace', 'size': 'x-small'}, **lgd_kws)
  plt.gca().invert_yaxis()
  fig.savefig(pltfile)     
  
#+END_SRC

+ Now make the same plot using all sample with GAIA match.

#+BEGIN_SRC python :return pltfile :results file :results output
  
  <<gaia-match-distance>>
  
  # Absolute magnitude

  # removing inf or nan values
  col = ["rpgeo", "phot_g_mean_mag", "phot_bp_mean_mag", "phot_rp_mean_mag", "bp_rp"] 
  df_new = df_dis[col] 
  df_new1 =  df_new.dropna()

  # G-mag
  Gmag_abs = np.array(df_new1["phot_g_mean_mag"]) - 5*np.log10(np.array(df_new1["rpgeo"])) + 5
  
  # other mag
  bp = np.array(df_new1["phot_bp_mean_mag"]) 
  rp = np.array(df_new1["phot_rp_mean_mag"])
  
  # Color
  #bp_rpmag = np.array(df_new1["bp_rp"])  
  bp_rpmag = bp - rp

  # distance kpc
  d = df_new1["rpgeo"] / 1000.

  # Creating new pandas table
  data = {'G_abs':Gmag_abs,
          'bp_rp':bp_rpmag,
           'd':d}

 
  df_result = pd.DataFrame(data)
  
  df_result_new = df_result.dropna()
  
  # mask with distance
  mask1 = df_result_new["d"] <= 4.0
  mask2 = df_result_new["d"] > 4.0
   
  # d < 4 kpc
  G_abs1 = np.array(df_result_new["G_abs"][mask1])
  bp_rp1 = np.array(df_result_new["bp_rp"][mask1])
  colors1 = ["bright blue",]
  colors1 = sns.xkcd_palette(colors1)
  
  # d > 4 kpc
  G_abs2 = np.array(df_result_new["G_abs"][mask2])
  bp_rp2 = np.array(df_result_new["bp_rp"][mask2])
  colors2 = ["pale green",]
  colors2 = sns.xkcd_palette(colors2)

  pltfile = 'color-mag_abs-gaia-distance-classify.jpg'
  sns.set_style('ticks')
  fig = plt.figure(figsize=(6, 7))
  ax = fig.add_subplot(111)
  
  ax.scatter(bp_rp1, G_abs1, c = colors1, edgecolor=['black'], alpha = 0.7, s = 40, zorder=5, label = r"H$\alpha$ emitters with D $\leq$ 4 kpc")
  ax.scatter(bp_rp2, G_abs2, c = colors2, edgecolor=['black'], alpha = 0.5, s = 30, zorder=4, label = r"H$\alpha$ emitters  with D > 4 kpc")
 
  #ax.scatter(bp_rpmag_cv, Gmag_cv_abs, c = colors1, edgecolor=['black'], alpha = 0.9, s = 50)
  #plt.scatter(bp_rpmag, Gmag_abs, alpha=0.8)
  plt.xlabel(r'$G_{BP} - G_{RP}$')
  plt.ylabel(r'$M_G + A_G$')
  #ax.set_xlim(-30.0, 390.0)
  #ax.set_ylim(-90.0, 90.0)
  ax.legend(prop={'family': 'monospace', 'size': 'x-small'}, **lgd_kws)
  plt.gca().invert_yaxis()
  fig.savefig(pltfile)    

#+END_SRC

#+RESULTS:
[[file:Final-list]]


#+BEGIN_SRC python :return pltfile :results file :results output
  
  <<gaia-match-distance>>
  
  # Absolute magnitude

  # removing inf or nan values
  col = ["rpgeo", "phot_g_mean_mag", "bp_rp"] 
  df_new = df_dis[col] 
  df_new1 =  df_new.dropna()

  # G-mag
  d = np.array(df_new1["rpgeo"])
  
  # Color
  bp_rpmag = np.array(df_new1["bp_rp"])  

  # Creating new pandas table
  data = {'d':d,
          'bp_rp':bp_rpmag}
  df_result = pd.DataFrame(data)
  
  df_result_new = df_result.dropna()
  
  d_final = np.array(df_result_new["d"]) / 1000.
  bp_rp = np.array(df_result_new["bp_rp"])
  # Calculate the point density
  xy = np.vstack([bp_rp, d_final])
  z = gaussian_kde(xy)(xy)

  # Sort the points by density, so that the densest points are plotted last
  idx = z.argsort()
  x, y, z = bp_rp[idx], d_final[idx], z[idx]

  # QSO
  d_qso = np.array(df_qso_dis["rpgeo"]) / 1000.
  bp_rpmag_qso =  df_qso_dis["bp_rp"]
  colors = ["cerulean",]
  colors = sns.xkcd_palette(colors)

  pltfile = 'color-distance-gaia-Bailer.pdf'
  sns.set_style('ticks')
  fig = plt.figure(figsize=(6, 7))
  ax = fig.add_subplot(111)
  
  ax.scatter(x, y, c=z, s=50, edgecolor=['none'])
  ax.scatter(bp_rpmag_qso, d_qso, c = colors, edgecolor=['black'], alpha = 0.4, s = 50)
  #plt.scatter(bp_rpmag, Gmag_abs, alpha=0.8)
  plt.xlabel(r'$G_{BP} - G_{RP}$')
  plt.ylabel(r'$D (Kpc)$')
  #ax.set_xlim(-30.0, 390.0)
  #ax.set_ylim(-90.0, 90.0)
  ax.legend(prop={'family': 'monospace', 'size': 'x-small'}, **lgd_kws)
  plt.gca().invert_yaxis()
  fig.savefig(pltfile)     
  
#+END_SRC

#+RESULTS:
[[file:Final-list]]

#+BEGIN_SRC python :return pltfile :results file :results output
  
  <<gaia-match-distance>>
  
  # removing inf or nan values
  col = ["rpgeo"] 
  df_new = df_dis[col] 
  df_new1 =  df_new.dropna()
  
  d = df_new1["rpgeo"] / 1000.
  
  # QSOs from simbad
  df_qso_new = df_qso_dis[col] 
  df_qso_new1 =  df_qso_new.dropna()
  
  d_qso = df_qso_new1["rpgeo"] / 1000.
  
  pltfile = 'dist-distance-Bailer-gaia.jpg'
  with sns.axes_style("ticks"):
    # Bar diagram
    fig, ax1 = plt.subplots(1, 1, figsize=(10, 6), sharex=True)
    plt.xlabel(r"$D(Kpc)$", fontsize=33)
    plt.ylabel(r"Number", fontsize=33)
    plt.tick_params(axis='x', labelsize=33) 
    plt.tick_params(axis='y', labelsize=33)
    d = [x for x in d]
    sns.distplot(d,norm_hist=True, kde=True, ax=ax1,
		 bins=30, color='r', label = r"All H_${\alpha}$ emitters")

    d_qso = [x for x in d_qso]
    sns.distplot(d_qso, norm_hist=True, kde=True, ax=ax1,
		 bins=30, color='b', label = r"Known QSO in H_${\alpha}$ emitters list")
  
  
    ax1.set(xlim=[-1, 15])
    ax1.legend(loc='upper right')
    ymax = ax1.get_ybound()[1]
    sns.despine()
    plt.tight_layout()
    plt.savefig(pltfile)
  
  pltfile1 = 'dist-distance-Bailer-gaia-qso.jpg'
  with sns.axes_style("ticks"):
    # Bar diagram
    fig, ax2 = plt.subplots(1, 1, figsize=(10, 6), sharex=True)
    plt.xlabel(r"$D(Kpc)$", fontsize=33)
    plt.ylabel(r"Number", fontsize=33)
    plt.tick_params(axis='x', labelsize=33) 
    plt.tick_params(axis='y', labelsize=33)
    d = [x for x in d]
   
    d_qso = [x for x in d_qso]
    sns.distplot(d_qso, norm_hist=False, kde=False, ax=ax2,
		 bins=30, color='b', label = r"Known QSO in H_${\alpha}$ emitters list")
  
    ax2.set(xlim=[-1, 15])
    ax2.legend(loc='upper right')
    ymax = ax1.get_ybound()[1]
    sns.despine()
    plt.tight_layout()
    plt.savefig(pltfile1)
  
#+END_SRC

#+RESULTS:
[[file:Final-list]]

- Ploting the sample with negative parallax GAIA:

#+BEGIN_SRC python :return pltfile :results file :results output
  
  <<gaia-match>>
  
  d_qso = 1 / df_qso["parallax"] 
  mask = (d_qso > 0.0) & (d_qso <= 4.0)
  mask1 = d_qso < 0.0
  
 
  # QSO
  Gmag_qso = df_qso["phot_g_mean_mag"][mask]
  bp_rpmag_qso = df_qso["bp_rp"][mask]
  colors = ["cerulean",]
  colors = sns.xkcd_palette(colors)
  
  # QSO with negative parallax 
  Gmag_qso1 = df_qso["phot_g_mean_mag"][mask1]
  bp_rpmag_qso1 = df_qso["bp_rp"][mask1]
  colors1 = ["pale yellow",]
  colors1 = sns.xkcd_palette(colors1)
  
  
  #pltfile = 'color-mag-gaia-QSOdist.pdf'
  pltfile = 'color-mag-gaia-QSOdist.jpg'
  sns.set_style('ticks')
  fig = plt.figure(figsize=(6, 7))
  ax = fig.add_subplot(111)
  
  #ax.scatter(x, y, c=z, s=50, edgecolor=['none'])
  ax.scatter(bp_rpmag_qso, Gmag_qso, c = colors, edgecolor=['black'], alpha = 0.7, s = 50, zorder=3, label="QSO (d < 4 kpc)")
  ax.scatter(bp_rpmag_qso1, Gmag_qso1, c = colors1, edgecolor=['black'], alpha = 0.9, s = 50, label="QSO with negative parallax")
  #plt.scatter(bp_rpmag, Gmag, alpha=0.8)
  plt.xlabel(r'$G_{BP} - G_{RP}$')
  plt.ylabel(r'$G$')
  ax.set_xlim(-0.8, 3.4)
  ax.set_ylim(13, 22.3)
  ax.legend(prop={'family': 'monospace', 'size': 'x-small'}, **lgd_kws)
  plt.gca().invert_yaxis()
  fig.savefig(pltfile)     
  
#+END_SRC

* Analizing the spectra

** SDSS

#+BEGIN_SRC python :return pltfile :results file :results output

import astropy.coordinates as coord
import astropy.units as u
from astropy.io import ascii
from astropy.table import Table, QTable
from astropy.coordinates import SkyCoord 
import numpy as np
from astropy.io import fits
import matplotlib.pyplot as plt
import argparse
import sys
import os
from astropy.visualization import hist
from astroML.datasets import fetch_imaging_sample, fetch_sdss_S82standards
from astroML.crossmatch import crossmatch_angular
from collections import OrderedDict
import glob
import json
import seaborn as sn

pattern = "iDR3_n4/SDSS-spectra-all-again/*.fits"
file_fits = glob.glob(pattern)

shape = (len(file_fits), 4)

inffits = []
for name_fit in file_fits:
    hdulist = fits.open(name_fit)
    c = SkyCoord(ra=float(hdulist[0].header["PLUG_RA"])*u.degree, dec=float(hdulist[0].header["PLUG_DEC"])*u.degree) 
    inffits.append('SDSSJ{0}{1}'.format(c.ra.to_string(u.hour, sep='', precision=2, pad=True), c.dec.to_string(sep='', precision=1, alwayssign=True, pad=True)))
    inffits.append(float(hdulist[0].header["PLUG_RA"]))
    inffits.append(float(hdulist[0].header["PLUG_DEC"]))
    inffits.append(float(hdulist[2].data['Z']))

XX_fits = np.array(inffits).reshape(shape)
print("Data shape:", XX_fits.shape)

# Tables with all information 
tab = Table(XX_fits, names=('ID', 'RA', 'DEC', 'Redshift'), meta={'name': 'first table'}, dtype=('S', 'S', 'f8', 'f8'))

#How many are the local universe
liml_z = tab["Redshift"] <= 0.02
limu_z = tab["Redshift"] > 0.02

print("Number the objects with z < 0.02:", len(tab[liml_z]))
print("Number the objects with z > 0.02:", len(tab[limu_z]))

tab.write("iDR3_n4/SDSS-spectra-all-again/spectra-information.ecsv", format="ascii.ecsv", overwrite=True)
tab.write("iDR3_n4/SDSS-spectra-all-again/spectra-information.dat", format="ascii.commented_header", overwrite=True)

#+END_SRC

#+RESULTS:
[[file:Data shape: (369, 4)
Number the objects with z < 0.02: 163
Number the objects with z > 0.02: 206
]]

With this have that only 163 objects are from the local universe.

** LAMOST

#+BEGIN_SRC python :return pltfile :results file :results output

import astropy.coordinates as coord
import astropy.units as u
from astropy.io import ascii
from astropy.table import Table, QTable
from astropy.coordinates import SkyCoord 
import numpy as np
from astropy.io import fits
import matplotlib.pyplot as plt
import argparse
import sys
import os
from astropy.visualization import hist
from astroML.datasets import fetch_imaging_sample, fetch_sdss_S82standards
from astroML.crossmatch import crossmatch_angular
from collections import OrderedDict
import glob
import json
import seaborn as sn

pattern = "Final-list/lamost-spectra/*.fits"
file_fits = glob.glob(pattern)

shape = (len(file_fits), 4)

inffits = []
for name_fit in file_fits:
    hdulist = fits.open(name_fit)
    c = SkyCoord(ra=float(hdulist[0].header["RA"])*u.degree, dec=float(hdulist[0].header["DEC"])*u.degree) 
    inffits.append('LAMOST{0}{1}'.format(c.ra.to_string(u.hour, sep='', precision=2, pad=True), c.dec.to_string(sep='', precision=1, alwayssign=True, pad=True)))
    inffits.append(float(hdulist[0].header["RA"]))
    inffits.append(float(hdulist[0].header["DEC"]))
    inffits.append(float(hdulist[0].header['Z']))

XX_fits = np.array(inffits).reshape(shape)
print("Data shape:", XX_fits.shape)

# Tables with all information 
tab = Table(XX_fits, names=('ID', 'RA', 'DEC', 'Redshift'), meta={'name': 'first table'}, dtype=('S', 'S', 'f8', 'f8'))

#How many are the local universe
liml_z = tab["Redshift"] <= 0.02
limu_z = tab["Redshift"] > 0.02

print("Number the objects with z < 0.02:", len(tab[liml_z]))
print("Number the objects with z > 0.02:", len(tab[limu_z]))

tab.write("Final-list/lamost-spectra/spectra-information-lamost.ecsv", format="ascii.ecsv", overwrite=True)
tab.write("Final-list/lamost-spectra/spectra-information-lamost.dat", format="ascii.commented_header", overwrite=True)

#+END_SRC

#+RESULTS:
[[file:Data shape: (110, 4)
Number the objects with z < 0.02: 77
Number the objects with z > 0.02: 33
]]

Here 77 objets are form the local universe.

** SIMBAD

 I took out the objects in SIMBAD table that have SDSS and Lamost spectra. The final file is:

: spectra-information-lamost-idsplus-non-spectra.csv

Now we count the objects by redshift range.


#+BEGIN_SRC python :results output
  from astropy.table import Table, vstack
  import pandas as pd
  from pathlib import Path
  import numpy as np


  ROOT_PATH = Path("paper/Figs")
  
  df = pd.read_csv("Final-list/spectra-information-lamost-idsplus-non-spectra.csv")
  print(df.columns)

  #How many are the local universe
  liml_z = df["redshift"] <= 0.02
  limu_z = df["redshift"] > 0.02

  print("Number the objects:", len(df))
  print("Number the objects with z < 0.02:", len(df[liml_z]))
  print("Number the objects with z > 0.02:", len(df[limu_z]))

#+END_SRC

#+RESULTS:
#+begin_example
Index(['Field', 'ID', 'RA', 'DEC', 'FWHM', 'ISOarea', 'KRON_RADIUS', 'MU_MAX',
       'nDet_PStotal', 'PhotoFlagDet', 'u_PStotal', 'J0378_PStotal',
       'J0395_PStotal', 'J0410_PStotal', 'J0430_PStotal', 'g_PStotal',
       'J0515_PStotal', 'r_PStotal', 'J0660_PStotal', 'i_PStotal',
       'J0861_PStotal', 'z_PStotal', 'e_u_PStotal', 'e_J0378_PStotal',
       'e_J0395_PStotal', 'e_J0410_PStotal', 'e_J0430_PStotal', 'e_g_PStotal',
       'e_J0515_PStotal', 'e_r_PStotal', 'e_J0660_PStotal', 'e_i_PStotal',
       'e_J0861_PStotal', 'e_z_PStotal', 'main_id', 'ra_x', 'dec_x',
       'coo_err_maj', 'coo_err_min', 'coo_err_angle', 'nbref', 'ra_sexa',
       'dec_sexa', 'main_type', 'other_types', 'radvel', 'redshift', 'sp_type',
       'morph_type', 'plx', 'pmra', 'pmdec', 'size_maj', 'size_min',
       'size_angle', 'B', 'V', 'R_x', 'J', 'H', 'K', 'u', 'g', 'r_xa', 'i',
       'z', 'angDist'],
      dtype='object')
Number the objects: 742
Number the objects with z < 0.02: 295
Number the objects with z > 0.02: 168
#+end_example

+ In total 206+33+168=407 objects have with high redshift (SDSS, LAMOST, SIMBAD). 

** The final tables

I create the final tables with information:

: python ../programs/final-table-allparameter.py 

Gtting the STAR clasification:

: Notebook/Star-galaxy-database 

** New color-color diagram

: EV = 0.0: x: 0.018073588174977603 y: -1.1509435891718687
: EV = 0.7: x: 0.8779161171076658 y: -0.41957855918471043

** Abstract IAU conference

In the way to map 9000 deg$^2$ of the Southern hemisphere in twelve photometric bands with an 0.8-m telescope, 
S-PLUS project will have covered 9300 deg2 of the Southern skies by
the time it is completed. S-PLUS has a crucial feature: images over the whole area taken in the Halpha narrow-band. The Halpha
transition provides a superb tool for the study of a number of important astrophysical processes and, in particular, it allows the
classification of different types of astrophysical sources. Here we explore the S-PLUS data release 3, which covers 2000 deg2,
including the Stripe-82 area, to highlight the potential of the survey for finding Halpha emitters using the (r - J0660) versus (r-i) 
color-color diagram and in distinguishing the red from the blue sources based on the (r - z) versus (g - r) diagram. Unsupervised clustering
machine learning approach reveals two distinct populations: one with an intense blue continuum and another one with a red
continuum. The hierarchical agglomerative clustering algorithm (HAC) was compared with the hierarchical density-based cluster
selection (HDBSCAN) in order to reinforce the robustness of the red and blue populations’ classification. By adopting a so-called
“soft” clustering approach, we assigned the probability of each emitter belonging to a given population, blue or red. We use synthetic 
and observed spectra to emphasize the potential of color-color diagrams in distinguishing several classes of Halpha emission-line emitters 
that include blue compact galaxies, star-forming galaxies, planetary nebulae, H II regions, young stellar objects, symbiotic stellar systems, 
cataclysmic variables, and quasars. In summary, the method described in detail in this paper is shown to be an efficient tool to find new emitters and to
classify them, using multi-color data.

* STARS

We decided focusing on point sources. It makes more sense to find the stellar locus with 3 arcsec
aperture. 

I ran the script. The improved one.

: python ../../programs/Selecting_Halpha_objects-v2.py DR3-SPLUS-PStotal-STAR-r16

+ I ran a LDA to clean the sample. Maybe would be a better idea to use a RF algorithm.

: lda-outliers.py

+ I created a algorithm to make the latex with the images a S-spectra of the objects.

: python ../plots-emitters-latex-v2.py Good-Halpha-DR3-SPLUS-PStotal-STAR-20r21-v2.ecsv

+ Crating PDF files with all figures.

: table-plots-18r20.tex
: plots-information.tex

Then, visually cleaned the sample, both the good and bad classification made by LDA.
And I merged all the tables with magnitude bin.

I eliminate the duplicate objects using the data base (=splusIDflag = 0=). See the jupyter:

: duplicate-sources.ipynb

Getting all parameters from database:
: match-splus-database-v2.py

And the repeat ID:

: python eliminate-repeat.py 

Final list after combined the old remaining objects with new one:
: Halpha-DR3_PStotal-STAR_merge-clean-duplicate-unique-final.ecsv

I wrote a python routine to make a PDF with the images and spectra of the final list.

: plots-emitters-latex-v4.py
: table-plots-Halpha-emitters-final.tex
: plot-information-final.tex
